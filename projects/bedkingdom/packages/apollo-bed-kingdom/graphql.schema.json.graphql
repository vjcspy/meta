# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Defines aggregation option fields."
interface AggregationOptionInterface {
    "The number of items that match the aggregation option."
    count: Int
    "The display label for an aggregation option."
    label: String
    "The internal ID that represents the value of the option."
    value: String!
}

"The AuthorInterface contains information about author."
interface AmBlogAuthorInterface {
    "The ID number assigned to the author"
    author_id: Int
    "The author facebook profile."
    facebook_profile: String
    "The author instagram profile."
    instagram_profile: String
    "The author linkedin profile."
    linkedin_profile: String
    "The author meta description"
    meta_description: String
    "The category meta robots"
    meta_robots: String
    "The author meta tags."
    meta_tags: String
    "The author meta title."
    meta_title: String
    "The author name."
    name: String
    "The author tiktok profile."
    tiktok_profile: String
    "The author twitter profile."
    twitter_profile: String
    "The author url key."
    url_key: String
    "The author youtube profile."
    youtube_profile: String
}

"The BlogCategoryInterface contains information about category."
interface AmBlogCategoryInterface {
    "The ID number assigned to the category"
    category_id: Int
    "The category created at date."
    created_at: String
    "The category level."
    level: String
    "The category meta description"
    meta_description: String
    "The category meta robots"
    meta_robots: String
    "The category meta tags."
    meta_tags: String
    "The category meta title."
    meta_title: String
    "The category title."
    name: String
    "The category parent id."
    parent_id: String
    "The category path."
    path: String
    "Post Count in Category."
    post_count: Int
    "The category sort order."
    sort_order: String
    "The category status."
    status: String
    "The category store ids."
    store_id: String
    "The category updated at date."
    updated_at: String
    "The category url key."
    url_key: String
}

"The CommentInterface contains information about comment."
interface AmBlogCommentInterface {
    "The ID number assigned to the comment"
    comment_id: Int
    "The comment created at date."
    created_at: String
    "The customer id."
    customer_id: String
    "The customer email."
    email: String
    "Message."
    message: String
    "The customer name."
    name: String
    "Post data(for recent comment widget only)"
    post: AmBlogPost
    "The post id."
    post_id: String
    "Reply to."
    reply_to: String
    "The comment status."
    status: String
    "The store id."
    store_id: String
    "The comment updated at date."
    updated_at: String
}

"The PostInterface contains information about post."
interface AmBlogPostInterface {
    "The post author id."
    author_id: String
    "The post canonical url."
    canonical_url: String
    "The post categories."
    categories: String
    "The post comment count."
    comment_count: Int
    "The post comment enabled."
    comments_enabled: String
    "The post created at date."
    created_at: String
    "The post display short content."
    display_short_content: String
    "The post full content."
    full_content: String
    "The post grid class."
    grid_class: String
    "Is featured."
    is_featured: Boolean
    "The post thumbnail on list."
    list_thumbnail: String
    "The post thumbnail alt on list."
    list_thumbnail_alt: String
    "The post meta description"
    meta_description: String
    "The post meta robots"
    meta_robots: String
    "The post meta tags."
    meta_tags: String
    "The post meta title."
    meta_title: String
    "The post notify on enable."
    notify_on_enable: String
    "The ID number assigned to the post"
    post_id: Int
    "The post thumbnail."
    post_thumbnail: String
    "The post thumbnail alt."
    post_thumbnail_alt: String
    "The post published at date."
    published_at: String
    "The related post ids."
    related_post_ids: String
    "The post short content."
    short_content: String
    "The post status."
    status: String
    "The post tag ids."
    tag_ids: String
    "The post title."
    title: String
    "The post updated at date."
    updated_at: String
    "The post url key."
    url_key: String
    "The post user define publish."
    user_define_publish: String
    "The post views."
    views: String
}

"The TagInterface contains information about tag."
interface AmBlogTagInterface {
    "The tag meta description"
    meta_description: String
    "The tag meta robots"
    meta_robots: String
    "The tag meta tags."
    meta_tags: String
    "The tag meta title."
    meta_title: String
    "The tag title."
    name: String
    "The ID number assigned to the tag"
    tag_id: Int
    "The category url key."
    url_key: String
}

"The AmBlogWidgetInterface contains information about widgets."
interface AmBlogWidgetInterface {
    "The widget title."
    title: String
}

interface CartAddressInterface {
    "The city specified for the billing or shipping address."
    city: String!
    "The company specified for the billing or shipping address."
    company: String
    "An object containing the country label and code."
    country: CartAddressCountry!
    "The first name of the customer or guest."
    firstname: String!
    "The last name of the customer or guest."
    lastname: String!
    "The ZIP or postal code of the billing or shipping address."
    postcode: String
    "An object containing the region label and code."
    region: CartAddressRegion
    "An array containing the street for the billing or shipping address."
    street: [String]!
    "The telephone number for the billing or shipping address."
    telephone: String
}

"An interface for products in a cart."
interface CartItemInterface {
    date_picker: String
    delivery_warning: String
    "An array of errors encountered while loading the cart item"
    errors: [CartItemError]
    id: String! @deprecated(reason: "Use `uid` instead.")
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"Contains the full set of attributes that can be returned in a category search."
interface CategoryInterface {
    am_exclude_from_filter: Int
    amasty_category_product_sort: Int
    amasty_dynamic_conditions: String
    amlanding_is_dynamic: Int
    amlanding_page_id: Int
    amp_display_mode: String
    amp_homepage_image: String
    available_sort_by: [String]
    "An array of breadcrumb items."
    breadcrumbs: [Breadcrumb]
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled."
    canonical_url: String
    category_description_tpl: String
    category_meta_description_tpl: String
    category_meta_keywords_tpl: String
    category_meta_title_tpl: String
    category_title_tpl: String
    children_count: String
    "Contains a category CMS block."
    cms_block: CmsBlock
    "The timestamp indicating when the category was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    custom_layout_update_file: String
    "The attribute to use for sorting."
    default_sort_by: String
    "An optional description of the category."
    description: String
    display_mode: String
    exclude_from_sitemap: Int
    filter_description_tpl: String
    filter_meta_description_tpl: String
    filter_meta_keywords_tpl: String
    filter_meta_title_tpl: String
    filter_price_range: Int
    filter_title_tpl: String
    googlecategory: String
    "An ID that uniquely identifies the category."
    id: Int @deprecated(reason: "Use `uid` instead.")
    image: String
    include_in_menu: Int
    is_anchor: Int
    landing_page: Int
    "The depth of the category within the tree."
    level: Int
    meta_description: String
    meta_keywords: String
    meta_title: String
    "The display name of the category."
    name: String
    "The full category path."
    path: String
    "The category path within the store."
    path_in_store: String
    "The position of the category relative to other categories at the same level in tree."
    position: Int
    "The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not."
    product_count: Int
    product_description_tpl: String
    product_full_description_tpl: String
    product_meta_description_tpl: String
    product_meta_keywords_tpl: String
    product_meta_title_tpl: String
    product_short_description_tpl: String
    product_title_tpl: String
    "The list of products assigned to the category."
    products(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20,
        "The attributes to sort on, and whether to return the results in ascending or descending order."
        sort: ProductAttributeSortInput
    ): CategoryProducts
    seo_page_header: String
    short_description: String
    thumbnail: String
    title_h1: String
    "The unique ID for a `CategoryInterface` object."
    uid: ID!
    "The timestamp indicating when the category was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "The URL key assigned to the category."
    url_key: String
    "The URL path assigned to the category."
    url_path: String
    "The part of the category URL that is appended after the url key"
    url_suffix: String
}

"Credit memo item details."
interface CreditMemoItemInterface {
    "Details about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for a `CreditMemoItemInterface` object."
    id: ID!
    "The order item the credit memo is applied to."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of refunded items."
    quantity_refunded: Float
}

"Contains basic information about a customizable option. It can be implemented by several types of configurable options."
interface CustomizableOptionInterface {
    customer_group: String
    description: String
    disabled: Boolean
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    store_view: String
    "The display name for this option."
    title: String
    type: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
}

"Contains information about customizable product options."
interface CustomizableProductInterface {
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
}

interface ErrorInterface {
    "The returned error message."
    message: String!
}

"Contains detailes about invoiced items."
interface InvoiceItemInterface {
    "Information about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for an `InvoiceItemInterface` object."
    id: ID!
    "Details about an individual order item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of invoiced items."
    quantity_invoiced: Float
}

interface LayerFilterItemInterface {
    "The count of items per filter."
    items_count: Int @deprecated(reason: "Use `AggregationOption.count` instead.")
    "The label for a filter."
    label: String @deprecated(reason: "Use `AggregationOption.label` instead.")
    "The value of a filter request variable to be used in query."
    value_string: String @deprecated(reason: "Use `AggregationOption.value` instead.")
}

"Contains basic information about a product image or video."
interface MediaGalleryInterface {
    "Indicates whether the image is hidden from view."
    disabled: Boolean
    "The label of the product image or video."
    label: String
    "The media item's position after it has been sorted."
    position: Int
    "The URL of the product image or video."
    url: String
}

"Order item details."
interface OrderItemInterface {
    additional_options: [OrderItemOption]
    "The final discount information for the product."
    discounts: [Discount]
    "The entered option for the base product, such as a logo or image."
    entered_options: [OrderItemOption]
    "The unique ID for an `OrderItemInterface` object."
    id: ID!
    "The name of the base product."
    product_name: String
    "The sale price of the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The type of product, such as simple, configurable, etc."
    product_type: String
    "URL key of the base product."
    product_url_key: String
    "The number of canceled items."
    quantity_canceled: Float
    "The number of invoiced items."
    quantity_invoiced: Float
    "The number of units ordered for this item."
    quantity_ordered: Float
    "The number of refunded items."
    quantity_refunded: Float
    "The number of returned items."
    quantity_returned: Float
    "The number of shipped items."
    quantity_shipped: Float
    "The selected options for the base product, such as color or size."
    selected_options: [OrderItemOption]
    "The status of the order item."
    status: String
}

"Contains attributes specific to tangible products."
interface PhysicalProductInterface {
    "The weight of the item, in units defined by the store."
    weight: Float
}

"Contains fields that are common to all types of products."
interface ProductInterface {
    "Add to cart url."
    add_to_cart_url: String
    "Add to wishlist information."
    add_to_wishlist: String
    additional_features: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    assembly_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    available_colours: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    available_sizes: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    back_stock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    backstock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    barcode: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    base_slat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Custom data in bedkingdom website"
    bed_data: BedData
    benifts: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    chair_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    colour: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Crosssell Products"
    crosssell_products: [ProductInterface]
    delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    dimentions: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    dining_chairs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_drawers: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    exchange_return_upgrade: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    feet_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    filling_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    fold_mechanism: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    free_delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    furniture_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    ggiftcard_amount_config: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Indicates whether a gift message is available."
    gift_message_available: String
    gtin: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    guarantee: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    headboard_included: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    ladder: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    leg_diameter: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    length: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number representing the product's manufacturer."
    manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    matching_headboard: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    material_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_bundle: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_depth: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_tention: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_turn: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    mpn: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    nocupboards: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    number_of_springs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    numberdrawers: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    optional_extras: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product url."
    product_url: String
    ranges: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "An array of products to be displayed in a Related Products block."
    related_products: [ProductInterface]
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    room_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    seat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    "The end date for a product with a special price."
    special_to_date: String
    split: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Stock status of the product"
    stock_status: ProductStockStatus
    stompa_colours: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The file name of a swatch image."
    swatch_image: String
    table_leg_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_leg_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_top_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    temperature_control_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    top_bunk_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_options: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    udropship_vendor: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Upsell Products"
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    wardrobe_doors: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
}

"Contains information about linked products, including the link type and product type of each item."
interface ProductLinksInterface {
    "One of related, associated, upsell, or crosssell."
    link_type: String
    "The SKU of the linked product."
    linked_product_sku: String
    "The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable)."
    linked_product_type: String
    "The position within the list of product links."
    position: Int
    "The identifier of the linked product."
    sku: String
}

"Routable entities serve as the model for a rendered page."
interface RoutableInterface {
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
}

"Order shipment item details."
interface ShipmentItemInterface {
    "The unique ID for a `ShipmentItemInterface` object."
    id: ID!
    "The order item associated with the shipment item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of shipped items."
    quantity_shipped: Float!
}

interface SwatchDataInterface {
    "The value can be represented as color (HEX code), image link, or text."
    value: String
}

interface SwatchLayerFilterItemInterface {
    "Data required to render a swatch filter item."
    swatch_data: SwatchData
}

"The interface for wish list items."
interface WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

type AddAmGiftCardProductsToCartOutput {
    "Describes the content of the specified shopping cart"
    cart: Cart!
}

"Contains details about the cart after adding bundle products."
type AddBundleProductsToCartOutput {
    "The cart after adding products."
    cart: Cart!
}

"Contains details about the cart after adding configurable products."
type AddConfigurableProductsToCartOutput {
    "The cart after adding products."
    cart: Cart!
}

"Contains details about the cart after adding downloadable products."
type AddDownloadableProductsToCartOutput {
    "The cart after adding products."
    cart: Cart!
}

"Contains details about the cart after adding products to it."
type AddProductsToCartOutput {
    "The cart after products have been added."
    cart: Cart!
    "Contains errors encountered while adding an item to the cart."
    user_errors: [CartUserInputError]!
}

"Contains the customer's wish list and any errors encountered."
type AddProductsToWishlistOutput {
    "An array of errors encountered while adding products to a wish list."
    user_errors: [WishListUserInputError]!
    "Contains the wish list with all items that were successfully added."
    wishlist: Wishlist!
}

"Contains details about the cart after adding simple or group products."
type AddSimpleProductsToCartOutput {
    "The cart after adding products."
    cart: Cart!
}

"Contains details about the cart after adding virtual products."
type AddVirtualProductsToCartOutput {
    "The cart after adding products."
    cart: Cart!
}

"Contains the resultant wish list and any error information."
type AddWishlistItemsToCartOutput {
    "An array of errors encountered while adding products to the customer's cart."
    add_wishlist_items_to_cart_user_errors: [WishlistCartUserInputError]!
    "Indicates whether the attempt to add items to the customer's cart was successful."
    status: Boolean!
    "Contains the wish list with all items that were successfully added."
    wishlist: Wishlist!
}

"Contains information for each filterable option (such as price, category `UID`, and custom attributes)."
type Aggregation {
    amshopby_filter_data: AmShopbyFilterData
    "Attribute code of the aggregation group."
    attribute_code: String!
    "The number of options in the aggregation group."
    count: Int
    "The aggregation display name."
    label: String
    "Array of options for the aggregation."
    options: [AggregationOption]
    "The relative position of the attribute in a layered navigation block."
    position: Int
}

"An implementation of `AggregationOptionInterface`."
type AggregationOption implements AggregationOptionInterface {
    "Bottom CMS Block"
    bottom_cms_block_id: Int
    "The number of items that match the aggregation option."
    count: Int
    "Option Description"
    description: String
    "Filter Code"
    filter_code: String
    "Option Image"
    image: String
    "Is Featured or Show in Brand Slider"
    is_featured: Boolean
    "The display label for an aggregation option."
    label: String
    "Meta Description"
    meta_description: String
    "Meta Keywords"
    meta_keywords: String
    "Meta Title"
    meta_title: String
    "Short Description"
    short_description: String
    "Small Image"
    slider_image: String
    "Position in Slider"
    slider_position: Int
    "Small Image Alt"
    small_image_alt: String
    "Option Title"
    title: String
    "Top CMS Block"
    top_cms_block_id: Int
    "URL Alias"
    url_alias: String
    "The internal ID that represents the value of the option."
    value: String!
}

type AheadworksBlogPost {
    name: String
    url: String
}

"Author is an implementation of AuthorInterface."
type AmBlogAuthor implements AmBlogAuthorInterface {
    "The ID number assigned to the author"
    author_id: Int
    "The author facebook profile."
    facebook_profile: String
    "The author instagram profile."
    instagram_profile: String
    "The author linkedin profile."
    linkedin_profile: String
    "The author meta description"
    meta_description: String
    "The category meta robots"
    meta_robots: String
    "The author meta tags."
    meta_tags: String
    "The author meta title."
    meta_title: String
    "The author name."
    name: String
    "The author tiktok profile."
    tiktok_profile: String
    "The author twitter profile."
    twitter_profile: String
    "The author url key."
    url_key: String
    "The author youtube profile."
    youtube_profile: String
}

type AmBlogAuthors {
    "An array of authors"
    items: [AmBlogAuthor]
}

type AmBlogCategories {
    "An array of categories"
    items: [AmBlogCategory]
}

"AmBlogCategoriesWidget is an implementation of AmBlogWidgetInterface."
type AmBlogCategoriesWidget implements AmBlogWidgetInterface {
    "Categories Limit."
    categories_limit: Int
    "Header Text."
    header_text: String
    "The widget title."
    title: String
}

"BlogCategory is an implementation of BlogCategoryInterface."
type AmBlogCategory implements AmBlogCategoryInterface {
    "The ID number assigned to the category"
    category_id: Int
    "The category created at date."
    created_at: String
    "The category level."
    level: String
    "The category meta description"
    meta_description: String
    "The category meta robots"
    meta_robots: String
    "The category meta tags."
    meta_tags: String
    "The category meta title."
    meta_title: String
    "The category title."
    name: String
    "The category parent id."
    parent_id: String
    "The category path."
    path: String
    "Post Count in Category."
    post_count: Int
    "The category sort order."
    sort_order: String
    "The category status."
    status: String
    "The category store ids."
    store_id: String
    "The category updated at date."
    updated_at: String
    "The category url key."
    url_key: String
}

"Comment is an implementation of CommentInterface."
type AmBlogComment implements AmBlogCommentInterface {
    "The ID number assigned to the comment"
    comment_id: Int
    "The comment created at date."
    created_at: String
    "The customer id."
    customer_id: String
    "The customer email."
    email: String
    "Message."
    message: String
    "The customer name."
    name: String
    "Post data(for recent comment widget only)"
    post: AmBlogPost
    "The post id."
    post_id: String
    "Reply to."
    reply_to: String
    "The comment status."
    status: String
    "The store id."
    store_id: String
    "The comment updated at date."
    updated_at: String
}

type AmBlogComments {
    "An array of comments"
    items: [AmBlogComment]
}

"AmBlogFeaturedPostsWidget is an implementation of AmBlogWidgetInterface."
type AmBlogFeaturedPostsWidget implements AmBlogWidgetInterface {
    "An array of posts"
    items: [AmBlogPost]
    "The widget title."
    title: String
}

type AmBlogLeaveCommentOutput {
    comment: AmBlogComment
}

type AmBlogLeaveVoteOutput {
    data: AmBlogVoteData
    voted: AmBlogVoteData
}

"Post is an implementation of PostInterface."
type AmBlogPost implements AmBlogPostInterface {
    "The post author id."
    author_id: String
    "The post canonical url."
    canonical_url: String
    "The post categories."
    categories: String
    "The post comment count."
    comment_count: Int
    "The post comment enabled."
    comments_enabled: String
    "The post created at date."
    created_at: String
    "The post display short content."
    display_short_content: String
    "The post full content."
    full_content: String
    "The post grid class."
    grid_class: String
    "Is featured."
    is_featured: Boolean
    "The post thumbnail on list."
    list_thumbnail: String
    "The post thumbnail alt on list."
    list_thumbnail_alt: String
    "The post meta description"
    meta_description: String
    "The post meta robots"
    meta_robots: String
    "The post meta tags."
    meta_tags: String
    "The post meta title."
    meta_title: String
    "The post notify on enable."
    notify_on_enable: String
    "The ID number assigned to the post"
    post_id: Int
    "The post thumbnail."
    post_thumbnail: String
    "The post thumbnail alt."
    post_thumbnail_alt: String
    "The post published at date."
    published_at: String
    "The related post ids."
    related_post_ids: String
    "The post short content."
    short_content: String
    "The post status."
    status: String
    "The post tag ids."
    tag_ids: String
    "The post title."
    title: String
    "The post updated at date."
    updated_at: String
    "The post url key."
    url_key: String
    "The post user define publish."
    user_define_publish: String
    "The post views."
    views: String
}

type AmBlogPosts {
    "All Collection Size"
    all_post_size: Int
    "An array of posts"
    items: [AmBlogPost]
}

type AmBlogProduct {
    "The attribute set assigned to the product."
    attribute_set_id: Int
    "Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled"
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    "The ID number assigned to the product."
    id: Int
    "The relative path to the main image on the product page."
    image: ProductImage
    "Is product salable"
    is_salable: Boolean
    "A number representing the product's manufacturer."
    manufacturer: Int
    "The product name. Customers use this name to identify the product."
    name: String
    "A ProductPrices object, indicating the price of an item."
    price: ProductPrices @deprecated(reason: "Use price_range for product price information.")
    "A PriceRange object, indicating the range of prices for the product"
    price_range: PriceRange!
    "An array of ProductLinks objects."
    product_links: [ProductLinksInterface]
    "Product rating."
    rating_summary: Int
    "Product reviews count."
    reviews_count: Int
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String
    "The discounted price of the product."
    special_price: Float
    "The end date that a product has a special price."
    special_to_date: String
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use __typename instead.")
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
}

type AmBlogProducts {
    "An array of related products for post"
    items: [AmBlogProduct]
}

"AmBlogRecentCommentsWidget is an implementation of AmBlogWidgetInterface."
type AmBlogRecentCommentsWidget implements AmBlogWidgetInterface {
    "Comments Limit."
    comments_limit: Int
    "Date Format."
    date_manner: String
    "Show Date for Recent Comments."
    display_date: Boolean
    "Header Text."
    header_text: String
    "An array of comments"
    items: [AmBlogComment]
    "The widget title."
    title: String
}

"AmBlogRecentPostsWidget is an implementation of AmBlogWidgetInterface."
type AmBlogRecentPostsWidget implements AmBlogWidgetInterface {
    "Post Categories for the Widget."
    amasty_widget_categories: String
    "Post Tags for the Widget."
    amasty_widget_tags: String
    "Date Format."
    date_manner: String
    "Show Date for Recent Comments."
    display_date: Boolean
    "Show Short Content for Recent Posts."
    display_short: Boolean
    "Header Text."
    header_text: String
    "An array of posts"
    items: [AmBlogPost]
    "Post Limit."
    posts_limit: Int
    "Short Content Limit."
    short_limit: Int
    "Show Post Images in the Widget View."
    show_images: Boolean
    "The widget title."
    title: String
}

"Array of configs."
type AmBlogSetting {
    comments_allow_guests: Boolean
    comments_ask_email: Boolean
    comments_ask_name: Boolean
    comments_autoapprove: Boolean
    comments_display_date: Boolean
    comments_display_short: Boolean
    comments_gdpr: Boolean
    comments_gdpr_text: String
    comments_record_limit: Int
    comments_use_comments: Boolean
    display_settings_display_at_category: Boolean
    display_settings_display_at_footer: Boolean
    display_settings_display_at_toolbar: Boolean
    display_settings_label: String
    is_show_related_posts_on_product_page: Boolean
    is_show_related_products_on_post_page: Boolean
    layout_desktop_list: String
    layout_desktop_post: String
    layout_mobile_list: String
    layout_mobile_post: String
    list_count_per_page: Int
    post_categories_limit: Int
    post_date_manner: String
    post_display_author: Boolean
    post_display_categories: Boolean
    post_display_tags: Boolean
    post_helpful: Boolean
    post_image_height: Int
    post_image_width: Int
    post_related_products_block_title: String
    product_related_posts_tab_title: String
    recent_posts_display_date: Boolean
    recent_posts_display_image: Boolean
    recent_posts_display_short: Boolean
    recent_posts_image_height: Int
    recent_posts_image_width: Int
    recent_posts_record_limit: Int
    recent_posts_short_limit: String
    search_engine_bread: String
    search_engine_meta_description: String
    search_engine_meta_keywords: String
    search_engine_meta_robots: String
    search_engine_meta_title: String
    search_engine_organization_name: String
    search_engine_route: String
    search_engine_title: String
    search_engine_title_suffix: String
    social_buttons: [String]
    social_enabled: Boolean
    tags_minimal_post_count: Int
}

"TagCategory is an implementation of TagInterface."
type AmBlogTag implements AmBlogTagInterface {
    "The tag meta description"
    meta_description: String
    "The tag meta robots"
    meta_robots: String
    "The tag meta tags."
    meta_tags: String
    "The tag meta title."
    meta_title: String
    "The tag title."
    name: String
    "The ID number assigned to the tag"
    tag_id: Int
    "The category url key."
    url_key: String
}

type AmBlogTags {
    "An array of tags"
    items: [AmBlogTag]
}

"AmBlogTagsWidget is an implementation of AmBlogWidgetInterface."
type AmBlogTagsWidget implements AmBlogWidgetInterface {
    "An array of tags"
    items: [AmBlogTag]
    "The widget title."
    title: String
}

type AmBlogVoteData {
    minus: Int
    plus: Int
}

type AmFormSubmitOutput {
    "Result status"
    status: Int
}

"Contains details about the gift card account"
type AmGiftCardAccount {
    "Gift card account code"
    code: String
    "Current balance of gift card"
    current_balance: Money
    "Gift card expiration date"
    expiration_date: String
    "Gift card status"
    status: String
}

type AmGiftCardCartItem implements CartItemInterface {
    "Image of the gift card product"
    am_giftcard_image: String
    "Options of the gift card product"
    am_giftcard_options: [AmGiftCardOption]!
    date_picker: String
    delivery_warning: String
    "An array of errors encountered while loading the cart item"
    errors: [CartItemError]
    id: String! @deprecated(reason: "Use `uid` instead.")
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"AmGiftCardImage contains image data of gift card"
type AmGiftCardImage {
    "Unique ID of gift card image"
    image_id: Int
    "The path of Gift Card Image"
    image_path: String
    "Either Enabled or Disabled"
    status: Int
    "Gift Card image title"
    title: String
    "The unique ID for a Image object"
    uid: ID
    "Is user uploaded flag"
    user_upload: Boolean
}

type AmGiftCardMutationCommonOutput {
    "Is mutation was failed."
    error: Boolean
    "Result message."
    message: String
}

type AmGiftCardOption {
    "Code of gift card option"
    code: String
    "Label of gift card option"
    label: String
    "Value of gift card option"
    value: String
}

type AmGiftCardPreview {
    "Rendered preview of Gift Card."
    content: String
}

"AmGiftCardPrice contains data of defined value of gift card"
type AmGiftCardPrice {
    "An internal attribute ID"
    attribute_id: Int
    "Unique ID of gift card price"
    price_id: Int
    "The value of the price"
    value: GiftCardPriceValue
    "ID of the website price is assigned to"
    website_id: Int
}

"AmGiftCardProduct defines properties of a gift card, including arrays of availiable values and images of the specific gift card"
type AmGiftCardProduct implements CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface {
    "Add to cart url."
    add_to_cart_url: String
    "Add to wishlist information."
    add_to_wishlist: String
    additional_features: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Indicates whether customers have the ability to set the value of the gift card"
    am_allow_open_amount: Boolean
    "Email template unique ID which will be send to the virtual or combined cart receiver"
    am_email_template: String
    "Indicates whether gift card have additional fee for purchase"
    am_giftcard_fee_enable: Boolean
    "Either PERCENT or FIXED"
    am_giftcard_fee_type: AmGiftCardFeeTypeEnum
    "Value of fee"
    am_giftcard_fee_value: Float
    "The number of days after purchase until the gift card expires"
    am_giftcard_lifetime: Int
    "An array that contains information about the values of gift card"
    am_giftcard_prices: [AmGiftCardPrice]
    "Either VIRTUAL PRINTED OR COMBINED"
    am_giftcard_type: AmGiftCardTypeEnum
    "An array that contains information about associated images to Gift Card"
    am_images: [AmGiftCardImage]
    "The maximum acceptable value of an open amount gift card"
    am_open_amount_max: GiftCardPriceValue
    "The minimum acceptable value of an open amount gift card"
    am_open_amount_min: GiftCardPriceValue
    assembly_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    available_colours: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    available_sizes: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    back_stock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    backstock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    barcode: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    base_slat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Custom data in bedkingdom website"
    bed_data: BedData
    benifts: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    chair_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    colour: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Crosssell Products"
    crosssell_products: [ProductInterface]
    delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    dimentions: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    dining_chairs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_drawers: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    exchange_return_upgrade: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    feet_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    filling_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    fold_mechanism: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    free_delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    furniture_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    ggiftcard_amount_config: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Indicates whether a gift message is available."
    gift_message_available: String
    gtin: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    guarantee: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    headboard_included: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    ladder: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    leg_diameter: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    length: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number representing the product's manufacturer."
    manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    matching_headboard: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    material_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_bundle: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_depth: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_tention: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_turn: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    mpn: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    nocupboards: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    number_of_springs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    numberdrawers: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    optional_extras: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product url."
    product_url: String
    ranges: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of products to be displayed in a Related Products block."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    room_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    seat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    "The end date for a product with a special price."
    special_to_date: String
    split: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Stock status of the product"
    stock_status: ProductStockStatus
    stompa_colours: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The file name of a swatch image."
    swatch_image: String
    table_leg_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_leg_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_top_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    temperature_control_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    top_bunk_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_options: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    udropship_vendor: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Upsell Products"
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    wardrobe_doors: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

type AmGiftCardSettings {
    "Allowed product types array."
    allowedProductTypes: [String]
    "Gift Card fields array."
    giftCardFields: [String]
    "Gift Card Lifetime."
    giftCardLifetime: Int
    "Gift Card timezones array."
    giftCardTimezones: [AmGiftCardTimezone]
    "Image uploading tooltip."
    imageUploadTooltip: String
    "Is allowed to use Gift Card by user who bought it."
    isAllowUseThemselves: Boolean
    "Is allowed to upload images by customers."
    isAllowUserImages: Boolean
    "Is module enabled flag."
    isEnabled: Boolean
    "Is allowed to pay extra fee via Gift Card."
    isExtraFeePaidAllowed: Boolean
    "Is show on checkout and cart pages flag."
    isShowOnCartAndCheckout: Boolean
    "Is allowed to pay shipping via Gift Card."
    isSippingPaidAllowed: Boolean
    "Is allowed to pay tax via Gift Card."
    isTaxPaidAllowed: Boolean
}

type AmGiftCardTimezone {
    "Timezone label"
    label: String
    "Timezone unique value"
    value: String
}

"Label info"
type AmLabel {
    "Label customer group"
    customer_group_ids: String
    "Label image."
    image: String
    "Is label visible"
    is_visible: Boolean
    "Label id."
    label_id: Int
    "Label name."
    name: String
    "Label position."
    position: String
    "Product id."
    product_id: Int
    "Label image size. Percent of the product image."
    size: String
    "Label css style."
    style: String
    "A settings for label tooltip"
    tooltip_settings: AmLabelTooltip
    "Label text."
    txt: String
}

type AmLabelList {
    "Labels."
    items: [AmLabel]
}

type AmLabelSetting {
    "Category Page Label Container."
    category_container: String
    "Labels Alignment."
    labels_alignment: Int
    "Margin between labels, px."
    margin_between: Int
    "Max Number of Labels on One Product."
    max_labels: Int
    "Product Page Label Container."
    product_container: String
    "Show Several Labels on the Same Place."
    show_several_on_place: Int
}

type AmLabelTooltip {
    "Tooltip color"
    color: String
    "Tooltip status"
    status: Int
    "Tooltip text"
    text: String
    "Tooltip text color"
    text_color: String
}

type AmMostviewedBundleItem {
    "Custom discount."
    discount_amount: Float
    "Product model."
    product: ProductInterface
    "Selected(required) qty."
    qty: Int
}

type AmMostviewedBundlePack {
    "Apply Discount to the Main Product."
    apply_for_parent: Boolean
    "Title."
    block_title: String
    "Upsell Message."
    cart_message: String
    "Discount Amount."
    discount_amount: Int
    "Discount Type."
    discount_type: Int
    "Bundle Pack Items."
    items: [AmMostviewedBundleItem]
}

type AmMostviewedBundlePacks {
    "Display Bundle Pack in Cart."
    is_display_cart_block: Boolean
    "Display Upsell Message in Cart."
    is_display_cart_message: Boolean
    "Add Bundle Packs Link to Top Menu."
    is_top_menu_enabled: Int
    "An array of bundle packs."
    items: [AmMostviewedBundlePack]
    "Main Product."
    main_product: ProductInterface
}

type AmMostviewedRelated {
    "Display 'Add to Cart' Button."
    add_to_cart: Boolean
    "Block Layout."
    block_layout: Int
    "Block Title."
    block_title: String
    "Display 'Add to Compare' Button."
    display_add_to_compare: Boolean
    "Display 'Add to Wish List' Button."
    display_add_to_wishlist: Boolean
    "An array of products."
    items: [ProductInterface]
    "Block Position."
    position: String
}

type AmMostviewedRelatedRules {
    "An array of Related Rules."
    items: [AmMostviewedRelated]
}

type AmShopbyFilterData {
    "Add From-To Widget"
    add_from_to_widget: Boolean
    "Show Only when Any Option of Attributes is Selected"
    attributes_filter: String
    "Show Only if the Following Option is Selected"
    attributes_options_filter: String
    "Show in the Block"
    block_position: Int
    "Categories Filter"
    categories_filter: String
    "Category Tree Depth"
    category_tree_depth: Int
    "Category Tree Display Mode"
    category_tree_display_mode: Int
    "Display Mode"
    display_mode: Int
    "Display Mode"
    display_mode_label: String
    "Filter Code"
    filter_code: String
    "Allow Google to FOLLOW Links on the Category Page with the Filter Applied"
    follow_mode: Int
    "Allow Google to INDEX the Category Page with the Filter Applied"
    index_mode: Int
    "Expand"
    is_expanded: Int
    "Allow Multiselect"
    is_multiselect: Boolean
    "Generate SEO URL"
    is_seo_significant: Boolean
    "Show Search Box"
    is_show_search_box: Boolean
    "Tooltips Enabled"
    is_tooltips_enabled: Boolean
    "Multiple Values Logic"
    is_use_and_logic: Boolean
    "Show the searchbox if the number of options more than"
    limit_options_show_search_box: Int
    "Number of Unfolded Options"
    number_unfolded_options: Int
    "Position"
    position: Int
    "Position Label"
    position_label: Int
    "Add rel='nofollow' to Filter Links"
    rel_nofollow: Int
    "Render All Categories Tree"
    render_all_categories_tree: Boolean
    "Render Categories Level"
    render_categories_level: Int
    "Show Icon on the Product Page"
    show_icons_on_product: Boolean
    "Show Product Quantities"
    show_product_quantities: Int
    "Position in Sidebar"
    side_position: Int
    "Maximum Slider Value"
    slider_max: Float
    "Minimum Slider Value"
    slider_min: Float
    "Slider Step"
    slider_step: Float
    "Sort Options By"
    sort_options_by: Int
    "Expand Subcategories"
    subcategories_expand: Int
    "Subcategories View"
    subcategories_view: Int
    "Tooltip"
    tooltip: String
    "Tooltip Image"
    tooltips_image: String
    "Position in Top"
    top_position: Int
    "Unit Label"
    units_label: String
    "Measure Units"
    units_label_use_currency_symbol: Int
    "Visible in Categories"
    visible_in_categories: String
}

type AmastyBlogPost {
    name: String
    url: String
}

type AmastyFaqQuestion {
    name: String
    url: String
}

type AnswerQuestion {
    answer: String
    is_show_full_answer: Boolean
    question_id: String
    question_link: String
    short_answer: String
    title: String
}

"Contains the applied gift card with applied and remaining balance"
type AppliedAmGiftCard {
    "Applied balance to the current cart"
    applied_balance: Money
    "Gift card account code"
    code: String
    "Current balance remaining on gift card"
    current_balance: Money
    "Gift card expiration date"
    expiration_date: String
}

"Contains the applied coupon code."
type AppliedCoupon {
    "The coupon code the shopper applied to the card."
    code: String!
}

"Defines the possible output for the applyAmGiftCardToCart mutation"
type ApplyAmGiftCardToCartOutput {
    "Describes the contents of the specified shopping cart"
    cart: Cart!
}

"Contains details about the cart after applying a coupon."
type ApplyCouponToCartOutput {
    "The cart after applying a coupon."
    cart: Cart!
}

type Assets {
    "The payment method logo url (descriptive)"
    descriptive: String
    "The payment method logo url (standard)"
    standard: String
}

"Contains the results of the request to assign a compare list."
type AssignCompareListToCustomerOutput {
    "The contents of the customer's compare list."
    compare_list: CompareList
    "Indicates whether the compare list was successfully assigned to the customer."
    result: Boolean!
}

"Contains details about the attribute, including the code and type."
type Attribute {
    "The unique identifier for an attribute code. This value should be in lowercase letters without spaces."
    attribute_code: String
    "Attribute options list."
    attribute_options: [AttributeOption]
    "The data type of the attribute."
    attribute_type: String
    "The type of entity that defines the attribute."
    entity_type: String
    "The frontend input type of the attribute."
    input_type: String
    "Details about the storefront properties configured for the attribute."
    storefront_properties: StorefrontProperties
}

"Defines an attribute option."
type AttributeOption {
    "The label assigned to the attribute option."
    label: String
    "The attribute option value."
    value: String
}

"Describes a payment method that the shopper can use to pay for the order."
type AvailablePaymentMethod {
    "The payment method code."
    code: String!
    "The payment method title."
    title: String!
}

"Contains details about the possible shipping methods and carriers."
type AvailableShippingMethod {
    "The cost of shipping using this shipping method."
    amount: Money!
    "Indicates whether this shipping method can be applied to the cart."
    available: Boolean!
    base_amount: Money @deprecated(reason: "The field should not be used on the storefront.")
    "A string that identifies a commercial carrier or an offline shipping method."
    carrier_code: String!
    "The label for the carrier code."
    carrier_title: String!
    "Describes an error condition."
    error_message: String
    "A shipping method code associated with a carrier. The value could be null if no method is available."
    method_code: String
    "The label for the shipping method code. The value could be null if no method is available."
    method_title: String
    "The cost of shipping using this shipping method, excluding tax."
    price_excl_tax: Money!
    "The cost of shipping using this shipping method, including tax."
    price_incl_tax: Money!
}

type BannerConfig {
    alt_text: String
    banner_type: String
    button_text: String
    custom: String
    custom_content: String
    custom_css: String
    description: String
    ga_promo_creative: String
    ga_promo_id: String
    ga_promo_name: String
    ga_promo_position: String
    id: String
    image: ImageDetail
    mobile_image: ImageDetail
    show_description: String
    show_title: String
    status: String
    target: String
    thumb_image: ImageDetail
    title: String
    url: String
    valid_from: String
    valid_to: String
    video: String
    wrap_link: String
}

type BedData {
    bed_category_product_image: [BedProductImage]
    bed_product_image: [BedProductImage]
    bed_product_image_360: [BedProductImage]
    finance_price: String
    gtm_tag_click: String
    rich_snippets: String
    trustpilot_product_reviews_summary: TrustpilotProductReviewsSummary
}

type BedProductImage {
    isMain: Boolean
    "The label of the product image or video."
    label: String
    position: Int
    type: String
    "The URL of the product image or video."
    url: String
    "The URL Mobile of the product image or video."
    url_mobile: String
    "The URL Mobile of the product image or video."
    url_thumbnail: String
    videoUrl: String
}

"Contains details about the billing address."
type BillingCartAddress implements CartAddressInterface {
    "The city specified for the billing or shipping address."
    city: String!
    "The company specified for the billing or shipping address."
    company: String
    "An object containing the country label and code."
    country: CartAddressCountry!
    customer_notes: String @deprecated(reason: "The field is used only in shipping address.")
    "The first name of the customer or guest."
    firstname: String!
    "The last name of the customer or guest."
    lastname: String!
    "The ZIP or postal code of the billing or shipping address."
    postcode: String
    "An object containing the region label and code."
    region: CartAddressRegion
    "An array containing the street for the billing or shipping address."
    street: [String]!
    "The telephone number for the billing or shipping address."
    telephone: String
}

"Brand info"
type Brand {
    "Brand image alt."
    alt: String
    "Brand Id."
    brandId: Int
    "Brand product count."
    cnt: Int
    "Brand description."
    description: String
    "Brand image."
    image: String
    "Brand image."
    img: String
    "Brand label."
    label: String
    "Brand list letter."
    letter: String
    "Brand short description."
    short_description: String
    "Brand url."
    url: String
}

"Brand info"
type BrandForSlider {
    "Brand image alt."
    alt: String
    "Brand Id."
    brandId: Int
    "Brand image."
    img: String
    "Brand label."
    label: String
    "Brand position."
    position: String
    "Brand url."
    url: String
}

type BrandList {
    "All letters."
    all_letters: String
    "Brand attribute."
    brand_attribute: Attribute
    "Display zero."
    display_zero: Boolean
    "Filter display all."
    filter_display_all: Boolean
    "Brand image height."
    image_height: Float
    "Brand image width."
    image_width: Float
    "Brands."
    items: [Brand]
    "Show count."
    show_count: Boolean
    "Show filter."
    show_filter: Boolean
    "Show images."
    show_images: Boolean
    "Show search."
    show_search: Boolean
}

type BrandSlider {
    "Autoplay."
    autoplay: Boolean
    "Autoplay delay."
    autoplay_delay: Int
    "Show buttons."
    buttons_show: Boolean
    "Image height."
    image_height: Float
    "Image width."
    image_width: Float
    "Infinity loop."
    infinity_loop: Boolean
    "Brands."
    items: [BrandForSlider]
    "Brands number."
    items_number: Int
    "Clickable pagination."
    pagination_clickable: Boolean
    "Show pagination."
    pagination_show: Boolean
    "Show label."
    show_label: Boolean
    "Simulate touch."
    simulate_touch: Boolean
    "Slider header color."
    slider_header_color: String
    "Slider title."
    slider_title: String
    "Slider title color."
    slider_title_color: String
    "Slider width."
    slider_width: Float
}

"Contains details about an individual category that comprises a breadcrumb."
type Breadcrumb {
    "The ID of the category."
    category_id: Int @deprecated(reason: "Use `category_uid` instead.")
    "The category level."
    category_level: Int
    "The display name of the category."
    category_name: String
    "The unique ID for a `Breadcrumb` object."
    category_uid: ID!
    "The URL key of the category."
    category_url_key: String
    "The URL path of the category."
    category_url_path: String
}

type BreakpointConfig {
    breakpoint_1: String
    breakpoint_2: String
    breakpoint_3: String
    breakpoint_4: String
}

"An implementation for bundle product cart items."
type BundleCartItem implements CartItemInterface {
    "An array containing the bundle options the shopper selected."
    bundle_options: [SelectedBundleOption]!
    "An array containing the customizable options the shopper selected."
    customizable_options: [SelectedCustomizableOption]!
    date_picker: String
    delivery_warning: String
    "An array of errors encountered while loading the cart item"
    errors: [CartItemError]
    "The entered gift message for the cart item"
    gift_message: GiftMessage
    id: String! @deprecated(reason: "Use `uid` instead.")
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"Defines bundle product options for `CreditMemoItemInterface`."
type BundleCreditMemoItem implements CreditMemoItemInterface {
    "A list of bundle options that are assigned to a bundle product that is part of a credit memo."
    bundle_options: [ItemSelectedBundleOption]
    "Details about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for a `CreditMemoItemInterface` object."
    id: ID!
    "The order item the credit memo is applied to."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of refunded items."
    quantity_refunded: Float
}

"Defines bundle product options for `InvoiceItemInterface`."
type BundleInvoiceItem implements InvoiceItemInterface {
    "A list of bundle options that are assigned to an invoiced bundle product."
    bundle_options: [ItemSelectedBundleOption]
    "Information about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for an `InvoiceItemInterface` object."
    id: ID!
    "Details about an individual order item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of invoiced items."
    quantity_invoiced: Float
}

"Defines an individual item within a bundle product."
type BundleItem {
    "An ID assigned to each type of item in a bundle product."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "An array of additional options for this bundle item."
    options: [BundleItemOption]
    "A number indicating the sequence order of this item compared to the other bundle items."
    position: Int
    "The range of prices for the product"
    price_range: PriceRange!
    "Indicates whether the item must be included in the bundle."
    required: Boolean
    "The SKU of the bundle product."
    sku: String
    "The display name of the item."
    title: String
    "The input type that the customer uses to select the item. Examples include radio button and checkbox."
    type: String
    "The unique ID for a `BundleItem` object."
    uid: ID
}

"Defines the characteristics that comprise a specific bundle item and its options."
type BundleItemOption {
    "Indicates whether the customer can change the number of items for this option."
    can_change_quantity: Boolean
    "The ID assigned to the bundled item option."
    id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether this option is the default option."
    is_default: Boolean
    "The text that identifies the bundled item option."
    label: String
    "When a bundle item contains multiple options, the relative position of this option compared to the other options."
    position: Int
    "The price of the selected option."
    price: Float
    "One of FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "Contains details about this product option."
    product: ProductInterface
    "Indicates the quantity of this specific bundle item."
    qty: Float @deprecated(reason: "Use `quantity` instead.")
    "The quantity of this specific bundle item."
    quantity: Float
    "The unique ID for a `BundleItemOption` object."
    uid: ID!
}

"Defines bundle product options for `OrderItemInterface`."
type BundleOrderItem implements OrderItemInterface {
    additional_options: [OrderItemOption]
    "A list of bundle options that are assigned to the bundle product."
    bundle_options: [ItemSelectedBundleOption]
    "The final discount information for the product."
    discounts: [Discount]
    "The entered option for the base product, such as a logo or image."
    entered_options: [OrderItemOption]
    "The unique ID for an `OrderItemInterface` object."
    id: ID!
    "The name of the base product."
    product_name: String
    "The sale price of the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The type of product, such as simple, configurable, etc."
    product_type: String
    "URL key of the base product."
    product_url_key: String
    "The number of canceled items."
    quantity_canceled: Float
    "The number of invoiced items."
    quantity_invoiced: Float
    "The number of units ordered for this item."
    quantity_ordered: Float
    "The number of refunded items."
    quantity_refunded: Float
    "The number of returned items."
    quantity_returned: Float
    "The number of shipped items."
    quantity_shipped: Float
    "The selected options for the base product, such as color or size."
    selected_options: [OrderItemOption]
    "The status of the order item."
    status: String
}

"Defines basic features of a bundle product and contains multiple BundleItems."
type BundleProduct implements CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface {
    "Add to cart url."
    add_to_cart_url: String
    "Add to wishlist information."
    add_to_wishlist: String
    additional_features: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    assembly_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    available_colours: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    available_sizes: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    back_stock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    backstock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    barcode: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    base_slat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Custom data in bedkingdom website"
    bed_data: BedData
    benifts: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    chair_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    colour: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Crosssell Products"
    crosssell_products: [ProductInterface]
    delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    dimentions: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    dining_chairs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_drawers: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Indicates whether the bundle product has a dynamic price."
    dynamic_price: Boolean
    "Indicates whether the bundle product has a dynamic SKU."
    dynamic_sku: Boolean
    "Indicates whether the bundle product has a dynamically calculated weight."
    dynamic_weight: Boolean
    exchange_return_upgrade: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    feet_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    filling_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    fold_mechanism: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    free_delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    furniture_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    ggiftcard_amount_config: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Indicates whether a gift message is available."
    gift_message_available: String
    gtin: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    guarantee: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    headboard_included: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    "An array containing information about individual bundle items."
    items: [BundleItem]
    ladder: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    leg_diameter: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    length: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number representing the product's manufacturer."
    manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    matching_headboard: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    material_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_bundle: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_depth: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_tention: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_turn: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    mpn: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    nocupboards: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    number_of_springs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    numberdrawers: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    optional_extras: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "One of PRICE_RANGE or AS_LOW_AS."
    price_view: PriceViewEnum
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product url."
    product_url: String
    ranges: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of products to be displayed in a Related Products block."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    room_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    seat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Indicates whether to ship bundle items together or individually."
    ship_bundle_items: ShipBundleItemsEnum
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    "The end date for a product with a special price."
    special_to_date: String
    split: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Stock status of the product"
    stock_status: ProductStockStatus
    stompa_colours: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The file name of a swatch image."
    swatch_image: String
    table_leg_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_leg_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_top_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    temperature_control_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    top_bunk_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_options: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    udropship_vendor: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Upsell Products"
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    wardrobe_doors: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

"Defines bundle product options for `ShipmentItemInterface`."
type BundleShipmentItem implements ShipmentItemInterface {
    "A list of bundle options that are assigned to a shipped product."
    bundle_options: [ItemSelectedBundleOption]
    "The unique ID for a `ShipmentItemInterface` object."
    id: ID!
    "The order item associated with the shipment item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of shipped items."
    quantity_shipped: Float!
}

"Defines bundle product options for `WishlistItemInterface`."
type BundleWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "An array containing information about the selected bundle items."
    bundle_options: [SelectedBundleOption]
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

"Contains the contents and other details about a guest or customer cart."
type Cart {
    "Contains the code attribute, which specifies the applied gift card codes"
    applied_am_gift_cards: [AppliedAmGiftCard]
    applied_coupon: AppliedCoupon @deprecated(reason: "Use `applied_coupons` instead.")
    "An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code."
    applied_coupons: [AppliedCoupon]
    "An array of available payment methods."
    available_payment_methods: [AvailablePaymentMethod]
    "The billing address assigned to the cart."
    billing_address: BillingCartAddress
    "The email address of the guest or customer."
    email: String
    "The entered gift message for the cart"
    gift_message: GiftMessage
    "The unique ID for a `Cart` object."
    id: ID!
    "Indicates whether the cart contains only virtual products."
    is_virtual: Boolean!
    "An array of products that have been added to the cart."
    items: [CartItemInterface]
    "Pricing details for the quote."
    prices: CartPrices
    "Indicates which payment method was applied to the cart."
    selected_payment_method: SelectedPaymentMethod
    "An array of shipping addresses assigned to the cart."
    shipping_addresses: [ShippingCartAddress]!
    "The total number of items in the cart."
    total_quantity: Float!
}

"Contains details the country in a billing or shipping address."
type CartAddressCountry {
    "The country code."
    code: String!
    "The display label for the country."
    label: String!
}

"Contains details about the region in a billing or shipping address."
type CartAddressRegion {
    "The state or province code."
    code: String
    "The display label for the region."
    label: String
    "The unique ID for a pre-defined region."
    region_id: Int
}

"Contains information about discounts applied to the cart."
type CartDiscount {
    "The amount of the discount applied to the item."
    amount: Money!
    "The description of the discount."
    label: [String]!
}

type CartItemError {
    "An error code that describes the error encountered"
    code: CartItemErrorType!
    "A localized error message"
    message: String!
}

"Contains details about the price of the item, including taxes and discounts."
type CartItemPrices {
    "An array of discounts to be applied to the cart item."
    discounts: [Discount]
    "An array of FPTs applied to the cart item."
    fixed_product_taxes: [FixedProductTax]
    "The price of the item before any discounts were applied. The price that might include tax, depending on the configured display settings for cart."
    price: Money!
    "The price of the item before any discounts were applied. The price that might include tax, depending on the configured display settings for cart."
    price_including_tax: Money!
    "The value of the price multiplied by the quantity of the item."
    row_total: Money!
    "The value of `row_total` plus the tax applied to the item."
    row_total_including_tax: Money!
    "The total of all discounts applied to the item."
    total_item_discount: Money
}

"Deprecated: The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`."
type CartItemQuantity {
    cart_item_id: Int! @deprecated(reason: "The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`.")
    quantity: Float! @deprecated(reason: "The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`.")
}

"Contains details about the price of a selected customizable value."
type CartItemSelectedOptionValuePrice {
    "Indicates whether the price type is fixed, percent, or dynamic."
    type: PriceTypeEnum!
    "A string that describes the unit of the value."
    units: String!
    "A price value."
    value: Float!
}

"Contains details about the final price of items in the cart, including discount and tax information."
type CartPrices {
    "An array containing the names and amounts of taxes applied to each item in the cart."
    applied_taxes: [CartTaxItem]
    discount: CartDiscount @deprecated(reason: "Use discounts instead.")
    "An array containing all discounts applied to the cart."
    discounts: [Discount]
    "The total, including discounts, taxes, shipping, and other fees."
    grand_total: Money
    "The subtotal without any applied taxes."
    subtotal_excluding_tax: Money
    "The subtotal including any applied taxes."
    subtotal_including_tax: Money
    "The subtotal with any discounts applied, but not taxes."
    subtotal_with_discount_excluding_tax: Money
}

"Contains tax information about an item in the cart."
type CartTaxItem {
    "The amount of tax applied to the item."
    amount: Money!
    "The description of the tax."
    label: String!
}

"An error encountered while adding an item to the the cart."
type CartUserInputError {
    "A cart-specific error code."
    code: CartUserInputErrorType!
    "A localized error message."
    message: String!
}

type Categories {
    "The payment method assets"
    asset_urls: [Assets]
    "The payment method identifier"
    identifier: String!
    "The payment method name"
    name: String!
}

"Contains details about the products assigned to a category."
type CategoryProducts {
    "An array of products that are assigned to the category."
    items: [ProductInterface]
    "Pagination metadata."
    page_info: SearchResultPageInfo
    "The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not."
    total_count: Int
}

"Contains a collection of `CategoryTree` objects and pagination information."
type CategoryResult {
    "A list of categories that match the filter criteria."
    items: [CategoryTree]
    "An object that includes the `page_info` and `currentPage` values specified in the query."
    page_info: SearchResultPageInfo
    "The total number of categories that match the criteria."
    total_count: Int
}

"Contains the hierarchy of categories."
type CategoryTree implements CategoryInterface & RoutableInterface {
    am_exclude_from_filter: Int
    amasty_category_product_sort: Int
    amasty_dynamic_conditions: String
    amlanding_is_dynamic: Int
    amlanding_page_id: Int
    amp_display_mode: String
    amp_homepage_image: String
    available_sort_by: [String]
    "An array of breadcrumb items."
    breadcrumbs: [Breadcrumb]
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled."
    canonical_url: String
    category_description_tpl: String
    category_meta_description_tpl: String
    category_meta_keywords_tpl: String
    category_meta_title_tpl: String
    category_title_tpl: String
    "A tree of child categories."
    children: [CategoryTree]
    children_count: String
    "Contains a category CMS block."
    cms_block: CmsBlock
    "The timestamp indicating when the category was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    custom_layout_update_file: String
    "The attribute to use for sorting."
    default_sort_by: String
    "An optional description of the category."
    description: String
    display_mode: String
    exclude_from_sitemap: Int
    filter_description_tpl: String
    filter_meta_description_tpl: String
    filter_meta_keywords_tpl: String
    filter_meta_title_tpl: String
    filter_price_range: Int
    filter_title_tpl: String
    googlecategory: String
    "An ID that uniquely identifies the category."
    id: Int @deprecated(reason: "Use `uid` instead.")
    image: String
    include_in_menu: Int
    is_anchor: Int
    landing_page: Int
    "The depth of the category within the tree."
    level: Int
    meta_description: String
    meta_keywords: String
    meta_title: String
    "The display name of the category."
    name: String
    "The full category path."
    path: String
    "The category path within the store."
    path_in_store: String
    "The position of the category relative to other categories at the same level in tree."
    position: Int
    "The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not."
    product_count: Int
    product_description_tpl: String
    product_full_description_tpl: String
    product_meta_description_tpl: String
    product_meta_keywords_tpl: String
    product_meta_title_tpl: String
    product_short_description_tpl: String
    product_title_tpl: String
    "The list of products assigned to the category."
    products(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20,
        "The attributes to sort on, and whether to return the results in ascending or descending order."
        sort: ProductAttributeSortInput
    ): CategoryProducts
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    seo_page_header: String
    short_description: String
    thumbnail: String
    title_h1: String
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "The unique ID for a `CategoryInterface` object."
    uid: ID!
    "The timestamp indicating when the category was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "The URL key assigned to the category."
    url_key: String
    "The URL path assigned to the category."
    url_path: String
    "The part of the category URL that is appended after the url key"
    url_suffix: String
}

"Defines details about an individual checkout agreement."
type CheckoutAgreement {
    "The ID for a checkout agreement."
    agreement_id: Int!
    "The checkbox text for the checkout agreement."
    checkbox_text: String!
    "Required. The text of the agreement."
    content: String!
    "The height of the text box where the Terms and Conditions statement appears during checkout."
    content_height: String
    "Indicates whether the `content` text is in HTML format."
    is_html: Boolean!
    "Indicates whether agreements are accepted automatically or manually."
    mode: CheckoutAgreementMode!
    "The name given to the condition."
    name: String!
}

type CheckoutSessionConfigOutput {
    button_color: String
    checkout_payload: String
    checkout_signature: String
    currency: String
    language: String
    login_payload: String
    login_signature: String
    merchant_id: String
    pay_only: Boolean
    paynow_payload: String
    paynow_signature: String
    public_key_id: String
    sandbox: Boolean
}

type CheckoutSessionDetailsOutput {
    response: String!
}

type CheckoutSessionSignInOutput {
    customer_bearer_token: String
    customer_email: String
    customer_firstname: String
    customer_id: String
    customer_last: String
    message: String
    success: Boolean
}

"An error encountered while adding an item to the cart."
type CheckoutUserInputError {
    "An error code that is specific to Checkout."
    code: CheckoutUserInputErrorCodes!
    "A localized error message."
    message: String!
    "The path to the input field that caused an error. See the GraphQL specification about path errors for details: http://spec.graphql.org/draft/#sec-Errors"
    path: [String]!
}

"Configuration for chiaki project"
type ChiakiConfig {
    key: String!
    store_id: String
    user_id: String!
    value: String!
}

"EntityUrl is an output object containing the `id`, `relative_url`, and `type` attributes"
type ChiakiPage {
    additional_data: String
    config_data: String
    "The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID."
    id: Int
    metadata: String
    page_type: UrlRewriteEntityTypeEnum
    "301 or 302 HTTP code for url permanent or temporary redirect or 0 for the 200 no redirect"
    redirectCode: Int
    "The internal relative URL. If the specified  url is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "One of PRODUCT, CATEGORY, CMS_PAGE, or CHIAKI_PAGE."
    type: UrlRewriteEntityTypeEnum
}

"Contains details about a specific CMS block."
type CmsBlock {
    "The content of the CMS block in raw HTML."
    content: String
    "The CMS block identifier."
    identifier: String
    "The title assigned to the CMS block."
    title: String
}

"Contains an array CMS block items."
type CmsBlocks {
    "An array of CMS blocks."
    items: [CmsBlock]
}

"Contains details about a CMS page."
type CmsPage implements RoutableInterface {
    "The content of the CMS page in raw HTML."
    content: String
    "The heading that displays at the top of the CMS page."
    content_heading: String
    "The ID of a CMS page."
    identifier: String
    "A brief description of the page for search results listings."
    meta_description: String
    "A brief description of the page for search results listings."
    meta_keywords: String
    "A page title that is indexed by search engines and appears in search results listings."
    meta_title: String
    "The design layout of the page, indicating the number of columns and navigation features used on the page."
    page_layout: String
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The name that appears in the breadcrumb trail navigation and in the browser title bar and tab."
    title: String
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "The URL key of the CMS page, which is often based on the `content_heading`."
    url_key: String
}

type ColorSwatchData implements SwatchDataInterface {
    "The value can be represented as color (HEX code), image link, or text."
    value: String
}

"Contains an attribute code that is used for product comparisons."
type ComparableAttribute {
    "An attribute code that is enabled for product comparisons."
    code: String!
    "The label of the attribute code."
    label: String!
}

"Defines an object used to iterate through items for product comparisons."
type ComparableItem {
    "An array of product attributes that can be used to compare products."
    attributes: [ProductAttribute]!
    "Details about a product in a compare list."
    product: ProductInterface!
    "The unique ID of an item in a compare list."
    uid: ID!
}

"Contains iterable information such as the array of items, the count, and attributes that represent the compare list."
type CompareList {
    "An array of attributes that can be used for comparing products."
    attributes: [ComparableAttribute]
    "The number of items in the compare list."
    item_count: Int!
    "An array of products to compare."
    items: [ComparableItem]
    "The unique ID assigned to the compare list."
    uid: ID!
}

type CompleteCheckoutSessionOutput {
    increment_id: String
    message: String
    success: Boolean
}

type ComplexTextValue {
    "Text that can contain HTML tags."
    html: String!
}

"Contains details about a configurable product attribute option."
type ConfigurableAttributeOption {
    "The ID assigned to the attribute."
    code: String
    "A string that describes the configurable attribute option."
    label: String
    "The unique ID for a `ConfigurableAttributeOption` object."
    uid: ID!
    "A unique index number assigned to the configurable product option."
    value_index: Int
}

"An implementation for configurable product cart items."
type ConfigurableCartItem implements CartItemInterface {
    "An array containing the configuranle options the shopper selected."
    configurable_options: [SelectedConfigurableOption]!
    "Product details of the cart item."
    configured_variant: ProductInterface!
    "An array containing the customizable options the shopper selected."
    customizable_options: [SelectedCustomizableOption]!
    date_picker: String
    delivery_warning: String
    "An array of errors encountered while loading the cart item"
    errors: [CartItemError]
    "The entered gift message for the cart item"
    gift_message: GiftMessage
    id: String! @deprecated(reason: "Use `uid` instead.")
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"Describes configurable options that have been selected and can be selected as a result of the previous selections."
type ConfigurableOptionAvailableForSelection {
    "An attribute code that uniquely identifies a configurable option."
    attribute_code: String!
    "An array of selectable option value IDs."
    option_value_uids: [ID]!
}

"Defines basic features of a configurable product and its simple product variants."
type ConfigurableProduct implements CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface {
    "Add to cart url."
    add_to_cart_url: String
    "Add to wishlist information."
    add_to_wishlist: String
    additional_features: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    assembly_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    available_colours: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    available_sizes: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    back_stock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    backstock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    barcode: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    base_slat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Custom data in bedkingdom website"
    bed_data: BedData
    benifts: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    chair_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    colour: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of options for the configurable product."
    configurable_options: [ConfigurableProductOptions]
    "An array of media gallery items and other details about selected configurable product options as well as details about remaining selectable options."
    configurable_product_options_selection(configurableOptionValueUids: [ID!]): ConfigurableProductOptionsSelection
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Crosssell Products"
    crosssell_products: [ProductInterface]
    delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    dimentions: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    dining_chairs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_drawers: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    exchange_return_upgrade: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    feet_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    filling_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    fold_mechanism: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    free_delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    furniture_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    ggiftcard_amount_config: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Indicates whether a gift message is available."
    gift_message_available: String
    gtin: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    guarantee: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    headboard_included: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    ladder: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    leg_diameter: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    length: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number representing the product's manufacturer."
    manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    matching_headboard: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    material_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_bundle: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_depth: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_tention: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_turn: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    mpn: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    nocupboards: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    number_of_springs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    numberdrawers: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    optional_extras: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product url."
    product_url: String
    ranges: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of products to be displayed in a Related Products block."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    room_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    seat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    "The end date for a product with a special price."
    special_to_date: String
    split: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Stock status of the product"
    stock_status: ProductStockStatus
    stompa_colours: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The file name of a swatch image."
    swatch_image: String
    table_leg_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_leg_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_top_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    temperature_control_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    top_bunk_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_options: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    udropship_vendor: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Upsell Products"
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    "An array of simple product variants."
    variants: [ConfigurableVariant]
    wardrobe_doors: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

"Contains details about configurable product options."
type ConfigurableProductOption {
    "An attribute code that uniquely identifies a configurable option."
    attribute_code: String!
    "The display name of the option."
    label: String!
    "The unique ID of the configurable option."
    uid: ID!
    "An array of values that are applicable for this option."
    values: [ConfigurableProductOptionValue]
}

"Defines a value for a configurable product option."
type ConfigurableProductOptionValue {
    "Indicates whether the product is available with this selected option."
    is_available: Boolean!
    "Indicates whether the value is the default."
    is_use_default: Boolean!
    "The display name of the value."
    label: String!
    "The URL assigned to the thumbnail of the swatch image."
    swatch: SwatchDataInterface
    "The unique ID of the value."
    uid: ID!
}

"Defines configurable attributes for the specified product."
type ConfigurableProductOptions {
    "A string that identifies the attribute."
    attribute_code: String
    "The ID assigned to the attribute."
    attribute_id: String @deprecated(reason: "Use `attribute_uid` instead.")
    "The ID assigned to the attribute."
    attribute_id_v2: Int @deprecated(reason: "Use `attribute_uid` instead.")
    "The unique ID for an `Attribute` object."
    attribute_uid: ID!
    "The configurable option ID number assigned by the system."
    id: Int @deprecated(reason: "Use `uid` instead.")
    "A displayed string that describes the configurable product option."
    label: String
    "A number that indicates the order in which the attribute is displayed."
    position: Int
    "This is the same as a product's `id` field."
    product_id: Int @deprecated(reason: "`product_id` is not needed and can be obtained from its parent.")
    "The unique ID for a `ConfigurableProductOptions` object."
    uid: ID!
    "Indicates whether the option is the default."
    use_default: Boolean
    "An array that defines the `value_index` codes assigned to the configurable product."
    values: [ConfigurableProductOptionsValues]
}

"Contains metadata corresponding to the selected configurable options."
type ConfigurableProductOptionsSelection {
    "An array of all possible configurable options."
    configurable_options: [ConfigurableProductOption]
    "Product images and videos corresponding to the specified configurable options selection."
    media_gallery: [MediaGalleryInterface]
    "The configurable options available for further selection based on the current selection."
    options_available_for_selection: [ConfigurableOptionAvailableForSelection]
    "A variant represented by the specified configurable options selection. The value is expected to be null until selections are made for each configurable option."
    variant: SimpleProduct
}

"Contains the index number assigned to a configurable product option."
type ConfigurableProductOptionsValues {
    "The label of the product on the default store."
    default_label: String
    "The label of the product."
    label: String
    "The label of the product on the current store."
    store_label: String
    "Swatch data for a configurable product option."
    swatch_data: SwatchDataInterface
    "The unique ID for a `ConfigurableProductOptionsValues` object."
    uid: ID
    "Indicates whether to use the default_label."
    use_default_value: Boolean
    "A unique index number assigned to the configurable product option."
    value_index: Int @deprecated(reason: "Use `uid` instead.")
}

"Contains all the simple product variants of a configurable product."
type ConfigurableVariant {
    "An array of configurable attribute options."
    attributes: [ConfigurableAttributeOption]
    "An array of linked simple products."
    product: SimpleProduct
}

"A configurable product wish list item."
type ConfigurableWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "The SKU of the simple product corresponding to a set of selected configurable options."
    child_sku: String! @deprecated(reason: "Use `ConfigurableWishlistItem.configured_variant.sku` instead.")
    "An array of selected configurable options."
    configurable_options: [SelectedConfigurableOption]
    "Product details of the selected variant. The value is null if some options are not configured."
    configured_variant: ProductInterface
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

type ContactSubmitOutput {
    code: String
    message: String
}

type Country {
    "An array of regions within a particular country."
    available_regions: [Region]
    "The name of the country in English."
    full_name_english: String
    "The name of the country in the current locale."
    full_name_locale: String
    "The unique ID for a `Country` object."
    id: String
    "The three-letter abbreviation of the country, such as USA."
    three_letter_abbreviation: String
    "The two-letter abbreviation of the country, such as US."
    two_letter_abbreviation: String
}

type CreateKlarnaPaymentsSessionOutput {
    "The payment method client token"
    client_token: String
    "The payment method categories"
    payment_method_categories: [Categories]
}

"Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods."
type CreatePayflowProTokenOutput {
    "The RESPMSG returned by PayPal. If the `result` is `0`, then `response_message` is `Approved`."
    response_message: String!
    "A non-zero value if any errors occurred."
    result: Int!
    "The RESULT returned by PayPal. A value of `0` indicates the transaction was approved."
    result_code: Int!
    "A secure token generated by PayPal."
    secure_token: String!
    "A secure token ID generated by PayPal."
    secure_token_id: String!
}

"Contains the completed product review."
type CreateProductReviewOutput {
    "Product review details."
    review: ProductReview!
}

"Contains credit memo details."
type CreditMemo {
    "Comments on the credit memo."
    comments: [SalesCommentItem]
    "The unique ID for a `CreditMemo` object."
    id: ID!
    "An array containing details about refunded items."
    items: [CreditMemoItemInterface]
    "The sequential credit memo number."
    number: String!
    "Details about the total refunded amount."
    total: CreditMemoTotal
}

type CreditMemoItem implements CreditMemoItemInterface {
    "Details about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for a `CreditMemoItemInterface` object."
    id: ID!
    "The order item the credit memo is applied to."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of refunded items."
    quantity_refunded: Float
}

"Contains credit memo price details."
type CreditMemoTotal {
    "An adjustment manually applied to the order."
    adjustment: Money!
    "The final base grand total amount in the base currency."
    base_grand_total: Money!
    "The applied discounts to the credit memo."
    discounts: [Discount]
    "The final total amount, including shipping, discounts, and taxes."
    grand_total: Money!
    "Details about the shipping and handling costs for the credit memo."
    shipping_handling: ShippingHandling
    "The subtotal of the invoice, excluding shipping, discounts, and taxes."
    subtotal: Money!
    "The credit memo tax details."
    taxes: [TaxItem]
    "The shipping amount for the credit memo."
    total_shipping: Money!
    "The amount of tax applied to the credit memo."
    total_tax: Money!
}

type Currency {
    "An array of three-letter currency codes accepted by the store, such as USD and EUR."
    available_currency_codes: [String]
    "The base currency set for the store, such as USD."
    base_currency_code: String
    "The symbol for the specified base currency, such as $."
    base_currency_symbol: String
    default_display_currecy_code: String @deprecated(reason: "Symbol was missed. Use `default_display_currency_code`.")
    default_display_currecy_symbol: String @deprecated(reason: "Symbol was missed. Use `default_display_currency_code`.")
    "The currency that is displayed by default, such as USD."
    default_display_currency_code: String
    "The currency symbol that is displayed by default, such as $."
    default_display_currency_symbol: String
    "An array of exchange rates for currencies defined in the store."
    exchange_rates: [ExchangeRate]
}

"Defines an array of custom attributes."
type CustomAttributeMetadata {
    "An array of attributes."
    items: [Attribute]
}

"Defines the customer name, addresses, and other details."
type Customer {
    "An array containing the customer's shipping and billing addresses."
    addresses: [CustomerAddress]
    "Indicates whether the customer has enabled remote shopping assistance."
    allow_remote_shopping_assistance: Boolean!
    "The contents of the customer's compare list."
    compare_list: CompareList
    "Timestamp indicating when the account was created."
    created_at: String
    "The customer's date of birth."
    date_of_birth: String
    "The ID assigned to the billing address."
    default_billing: String
    "The ID assigned to the shipping address."
    default_shipping: String
    "The customer's date of birth."
    dob: String @deprecated(reason: "Use `date_of_birth` instead.")
    "The customer's email address. Required."
    email: String
    "The customer's first name."
    firstname: String
    "The customer's gender (Male - 1, Female - 2)."
    gender: Int
    group_id: Int @deprecated(reason: "Customer group should not be exposed in the storefront scenarios.")
    "The ID assigned to the customer."
    id: Int @deprecated(reason: "`id` is not needed as part of `Customer`, because on the server side, it can be identified based on the customer token used for authentication. There is no need to know customer ID on the client side.")
    "Indicates whether the customer is subscribed to the company's newsletter."
    is_subscribed: Boolean
    "The customer's family name."
    lastname: String
    "The customer's middle name."
    middlename: String
    orders(
        "Specifies which page of results to return. The default value is 1"
        currentPage: Int = 1,
        "Defines the filter to use for searching customer orders"
        filter: CustomerOrdersFilterInput,
        "Specifies the maximum number of results to return at once. The default value is 20"
        pageSize: Int = 20
    ): CustomerOrders
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "Contains the customer's product reviews."
    reviews(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20
    ): ProductReviews!
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's Value-added tax (VAT) number (for corporate customers)."
    taxvat: String
    "Return a customer's wish lists."
    wishlist: Wishlist! @deprecated(reason: "Use `Customer.wishlists` or `Customer.wishlist_v2` instead.")
    "Retrieve the wish list identified by the unique ID for a `Wishlist` object."
    wishlist_v2(id: ID!): Wishlist
    "An array of wishlists. In Magento Open Source, customers are limited to one wish list. The number of wish lists is configurable for Adobe Commerce."
    wishlists(
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Specifies the maximum number of results to return at once. This attribute is optional."
        pageSize: Int = 20
    ): [Wishlist]!
}

"Contains detailed information about a customer's billing or shipping address."
type CustomerAddress {
    "The customer's city or town."
    city: String
    "The customer's company."
    company: String
    "The customer's country."
    country_code: CountryCodeEnum
    "The customer's country."
    country_id: String @deprecated(reason: "Use `country_code` instead.")
    custom_attributes: [CustomerAddressAttribute] @deprecated(reason: "Custom attributes should not be put into a container.")
    "The customer ID"
    customer_id: Int @deprecated(reason: "`customer_id` is not needed as part of `CustomerAddress`. The `id` is a unique identifier for the addresses.")
    "Indicates whether the address is the customer's default billing address."
    default_billing: Boolean
    "Indicates whether the address is the customer's default shipping address."
    default_shipping: Boolean
    "Contains any extension attributes for the address."
    extension_attributes: [CustomerAddressAttribute]
    "The customer's fax number."
    fax: String
    "The first name of the person associated with the shipping/billing address."
    firstname: String
    "The ID of a `CustomerAddress` object."
    id: Int
    "The family name of the person associated with the shipping/billing address."
    lastname: String
    "The middle name of the person associated with the shipping/billing address."
    middlename: String
    "The customer's ZIP or postal code."
    postcode: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "An object containing the region name, region code, and region ID."
    region: CustomerAddressRegion
    "The unique ID for a pre-defined region."
    region_id: Int
    "An array of strings that define the street number and name."
    street: [String]
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's telephone number."
    telephone: String
    "The customer's Value-added tax (VAT) number (for corporate customers)."
    vat_id: String
}

"Specifies the attribute code and value of a customer address attribute."
type CustomerAddressAttribute {
    "The name assigned to the customer address attribute."
    attribute_code: String
    "The valuue assigned to the customer address attribute."
    value: String
}

"Defines the customer's state or province."
type CustomerAddressRegion {
    "The state or province name."
    region: String
    "The address region code."
    region_code: String
    "The unique ID for a pre-defined region."
    region_id: Int
}

"Contains details about a single downloadable product."
type CustomerDownloadableProduct {
    "The date and time the purchase was made."
    date: String
    "The fully qualified URL to the download file."
    download_url: String
    "The unique ID assigned to the item."
    order_increment_id: String
    "The remaining number of times the customer can download the product."
    remaining_downloads: String
    "Indicates when the product becomes available for download. Options are `Pending` and `Invoiced`."
    status: String
}

"Contains a list of downloadable products."
type CustomerDownloadableProducts {
    "An array of purchased downloadable items."
    items: [CustomerDownloadableProduct]
}

"Contains details about each of the customer's orders."
type CustomerOrder {
    "The billing address for the order."
    billing_address: OrderAddress
    "The shipping carrier for the order delivery."
    carrier: String
    "Comments about the order."
    comments: [SalesCommentItem]
    created_at: String @deprecated(reason: "Use the `order_date` field instead.")
    "A list of credit memos."
    credit_memos: [CreditMemo]
    "The entered gift message for the order"
    gift_message: GiftMessage
    grand_total: Float @deprecated(reason: "Use the `totals.grand_total` field instead.")
    "The unique ID for a `CustomerOrder` object."
    id: ID!
    increment_id: String @deprecated(reason: "Use the `id` field instead.")
    "A list of invoices for the order."
    invoices: [Invoice]!
    "An array containing the items purchased in this order."
    items: [OrderItemInterface]
    "The order number."
    number: String!
    "The date the order was placed."
    order_date: String!
    order_number: String! @deprecated(reason: "Use the `number` field instead.")
    "Payment details for the order."
    payment_methods: [OrderPaymentMethod]
    "A list of shipments for the order."
    shipments: [OrderShipment]
    "The shipping address for the order."
    shipping_address: OrderAddress
    "The delivery method for the order."
    shipping_method: String
    "The current status of the order."
    status: String!
    "Details about the calculated totals for this order."
    total: OrderTotal
}

"The collection of orders that match the conditions defined in the filter."
type CustomerOrders {
    "An array of customer orders."
    items: [CustomerOrder]!
    "Contains pagination metadata."
    page_info: SearchResultPageInfo
    "The total count of customer orders."
    total_count: Int
}

"Contains details about a newly-created or updated customer."
type CustomerOutput {
    "Customer details after creating or updating a customer."
    customer: Customer!
}

"Contains payment tokens stored in the customer's vault."
type CustomerPaymentTokens {
    "An array of payment tokens."
    items: [PaymentToken]!
}

"Contains a customer authorization token."
type CustomerToken {
    "The customer authorization token."
    token: String
}

"Contains information about a text area that is defined as part of a customizable option."
type CustomizableAreaOption implements CustomizableOptionInterface {
    customer_group: String
    description: String
    disabled: Boolean
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    store_view: String
    "The display name for this option."
    title: String
    type: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An object that defines a text area."
    value: CustomizableAreaValue
}

"Defines the price and sku of a product whose page contains a customized text area."
type CustomizableAreaValue {
    "The maximum number of characters that can be entered for this customizable option."
    max_characters: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The unique ID for a `CustomizableAreaValue` object."
    uid: ID!
}

"Contains information about a set of checkbox values that are defined as part of a customizable option."
type CustomizableCheckboxOption implements CustomizableOptionInterface {
    customer_group: String
    description: String
    disabled: Boolean
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    store_view: String
    "The display name for this option."
    title: String
    type: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An array that defines a set of checkbox values."
    value: [CustomizableCheckboxValue]
}

"Defines the price and sku of a product whose page contains a customized set of checkbox values."
type CustomizableCheckboxValue {
    base_image: String
    dependency: String
    dependency_type: Int
    description: String
    disabled: Boolean
    is_default: Boolean
    mageworx_option_type_price: String
    option_id: String
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the checkbox value is displayed."
    sort_order: Int
    special_price: String
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableCheckboxValue` object."
    uid: ID!
    url: String
}

"Contains information about a date picker that is defined as part of a customizable option."
type CustomizableDateOption implements CustomizableOptionInterface {
    customer_group: String
    description: String
    disabled: Boolean
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    store_view: String
    "The display name for this option."
    title: String
    type: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An object that defines a date field in a customizable option."
    value: CustomizableDateValue
}

"Defines the price and sku of a product whose page contains a customized date picker."
type CustomizableDateValue {
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "DATE, DATE_TIME or TIME"
    type: CustomizableDateTypeEnum
    "The unique ID for a `CustomizableDateValue` object."
    uid: ID!
}

"Contains information about a drop down menu that is defined as part of a customizable option."
type CustomizableDropDownOption implements CustomizableOptionInterface {
    customer_group: String
    description: String
    disabled: Boolean
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    store_view: String
    "The display name for this option."
    title: String
    type: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An array that defines the set of options for a drop down menu."
    value: [CustomizableDropDownValue]
}

"Defines the price and sku of a product whose page contains a customized drop down menu."
type CustomizableDropDownValue {
    base_image: String
    dependency: String
    dependency_type: Int
    description: String
    disabled: Boolean
    is_default: Boolean
    mageworx_option_type_price: String
    option_id: String
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the option is displayed."
    sort_order: Int
    special_price: String
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableDropDownValue` object."
    uid: ID!
    url: String
}

"Contains information about a text field that is defined as part of a customizable option."
type CustomizableFieldOption implements CustomizableOptionInterface {
    customer_group: String
    description: String
    disabled: Boolean
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    store_view: String
    "The display name for this option."
    title: String
    type: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An object that defines a text field."
    value: CustomizableFieldValue
}

"Defines the price and sku of a product whose page contains a customized text field."
type CustomizableFieldValue {
    "The maximum number of characters that can be entered for this customizable option."
    max_characters: Int
    "The price of the custom value."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The unique ID for a `CustomizableFieldValue` object."
    uid: ID!
}

"Contains information about a file picker that is defined as part of a customizable option."
type CustomizableFileOption implements CustomizableOptionInterface {
    customer_group: String
    description: String
    disabled: Boolean
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "The Stock Keeping Unit of the base product."
    product_sku: String
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    store_view: String
    "The display name for this option."
    title: String
    type: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An object that defines a file value."
    value: CustomizableFileValue
}

"Defines the price and sku of a product whose page contains a customized file picker."
type CustomizableFileValue {
    "The file extension to accept."
    file_extension: String
    "The maximum width of an image."
    image_size_x: Int
    "The maximum height of an image."
    image_size_y: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The unique ID for a `CustomizableFileValue` object."
    uid: ID!
}

"Contains information about a multiselect that is defined as part of a customizable option."
type CustomizableMultipleOption implements CustomizableOptionInterface {
    customer_group: String
    description: String
    disabled: Boolean
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    store_view: String
    "The display name for this option."
    title: String
    type: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An array that defines the set of options for a multiselect."
    value: [CustomizableMultipleValue]
}

"Defines the price and sku of a product whose page contains a customized multiselect."
type CustomizableMultipleValue {
    base_image: String
    dependency: String
    dependency_type: Int
    description: String
    disabled: Boolean
    is_default: Boolean
    mageworx_option_type_price: String
    option_id: String
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the option is displayed."
    sort_order: Int
    special_price: String
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableMultipleValue` object."
    uid: ID!
    url: String
}

"Contains information about a set of radio buttons that are defined as part of a customizable option."
type CustomizableRadioOption implements CustomizableOptionInterface {
    customer_group: String
    description: String
    disabled: Boolean
    "Option ID."
    option_id: Int @deprecated(reason: "Use `uid` instead")
    "Indicates whether the option is required."
    required: Boolean
    "The order in which the option is displayed."
    sort_order: Int
    store_view: String
    "The display name for this option."
    title: String
    type: String
    "The unique ID for a `CustomizableOptionInterface` object."
    uid: ID!
    "An array that defines a set of radio buttons."
    value: [CustomizableRadioValue]
}

"Defines the price and sku of a product whose page contains a customized set of radio buttons."
type CustomizableRadioValue {
    base_image: String
    dependency: String
    dependency_type: Int
    description: String
    disabled: Boolean
    is_default: Boolean
    mageworx_option_type_price: String
    option_id: String
    "The ID assigned to the value."
    option_type_id: Int
    "The price assigned to this option."
    price: Float
    "FIXED, PERCENT, or DYNAMIC."
    price_type: PriceTypeEnum
    "The Stock Keeping Unit for this option."
    sku: String
    "The order in which the radio button is displayed."
    sort_order: Int
    special_price: String
    "The display name for this option."
    title: String
    "The unique ID for a `CustomizableRadioValue` object."
    uid: ID!
    url: String
}

"Contains the results of the request to delete a compare list."
type DeleteCompareListOutput {
    "Indicates whether the compare list was successfully deleted."
    result: Boolean!
}

"Indicates whether the request succeeded and returns the remaining customer payment tokens."
type DeletePaymentTokenOutput {
    "A container for the customer's remaining payment tokens."
    customerPaymentTokens: CustomerPaymentTokens
    "Indicates whether the request succeeded."
    result: Boolean!
}

type DeliveryNextDay {
    limit_dates: [String]
    min_date: String
}

"Defines an individual discount. A discount can be applied to the cart as a whole or to an item."
type Discount {
    "The amount of the discount."
    amount: Money!
    "A description of the discount."
    label: String!
}

"An implementation for downloadable product cart items."
type DownloadableCartItem implements CartItemInterface {
    "An array containing the customizable options the shopper selected."
    customizable_options: [SelectedCustomizableOption]!
    date_picker: String
    delivery_warning: String
    "An array of errors encountered while loading the cart item"
    errors: [CartItemError]
    id: String! @deprecated(reason: "Use `uid` instead.")
    "An array containing information about the links for the downloadable product added to the cart."
    links: [DownloadableProductLinks]
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "An array containing information about samples of the selected downloadable product."
    samples: [DownloadableProductSamples]
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"Defines downloadable product options for `CreditMemoItemInterface`."
type DownloadableCreditMemoItem implements CreditMemoItemInterface {
    "Details about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "A list of downloadable links that are refunded from the downloadable product."
    downloadable_links: [DownloadableItemsLinks]
    "The unique ID for a `CreditMemoItemInterface` object."
    id: ID!
    "The order item the credit memo is applied to."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of refunded items."
    quantity_refunded: Float
}

"Defines downloadable product options for `InvoiceItemInterface`."
type DownloadableInvoiceItem implements InvoiceItemInterface {
    "Information about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "A list of downloadable links that are invoiced from the downloadable product."
    downloadable_links: [DownloadableItemsLinks]
    "The unique ID for an `InvoiceItemInterface` object."
    id: ID!
    "Details about an individual order item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of invoiced items."
    quantity_invoiced: Float
}

"Defines characteristics of the links for downloadable product."
type DownloadableItemsLinks {
    "A number indicating the sort order."
    sort_order: Int
    "The display name of the link."
    title: String
    "The unique ID for a `DownloadableItemsLinks` object."
    uid: ID!
}

"Defines downloadable product options for `OrderItemInterface`."
type DownloadableOrderItem implements OrderItemInterface {
    additional_options: [OrderItemOption]
    "The final discount information for the product."
    discounts: [Discount]
    "A list of downloadable links that are ordered from the downloadable product."
    downloadable_links: [DownloadableItemsLinks]
    "The entered option for the base product, such as a logo or image."
    entered_options: [OrderItemOption]
    "The unique ID for an `OrderItemInterface` object."
    id: ID!
    "The name of the base product."
    product_name: String
    "The sale price of the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The type of product, such as simple, configurable, etc."
    product_type: String
    "URL key of the base product."
    product_url_key: String
    "The number of canceled items."
    quantity_canceled: Float
    "The number of invoiced items."
    quantity_invoiced: Float
    "The number of units ordered for this item."
    quantity_ordered: Float
    "The number of refunded items."
    quantity_refunded: Float
    "The number of returned items."
    quantity_returned: Float
    "The number of shipped items."
    quantity_shipped: Float
    "The selected options for the base product, such as color or size."
    selected_options: [OrderItemOption]
    "The status of the order item."
    status: String
}

"Defines a product that the shopper downloads."
type DownloadableProduct implements CustomizableProductInterface & ProductInterface & RoutableInterface {
    "Add to cart url."
    add_to_cart_url: String
    "Add to wishlist information."
    add_to_wishlist: String
    additional_features: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    assembly_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    available_colours: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    available_sizes: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    back_stock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    backstock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    barcode: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    base_slat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Custom data in bedkingdom website"
    bed_data: BedData
    benifts: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    chair_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    colour: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Crosssell Products"
    crosssell_products: [ProductInterface]
    delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    dimentions: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    dining_chairs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_drawers: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array containing information about the links for this downloadable product."
    downloadable_product_links: [DownloadableProductLinks]
    "An array containing information about samples of this downloadable product."
    downloadable_product_samples: [DownloadableProductSamples]
    exchange_return_upgrade: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    feet_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    filling_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    fold_mechanism: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    free_delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    furniture_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    ggiftcard_amount_config: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Indicates whether a gift message is available."
    gift_message_available: String
    gtin: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    guarantee: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    headboard_included: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    ladder: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    leg_diameter: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    length: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A value of 1 indicates that each link in the array must be purchased separately."
    links_purchased_separately: Int
    "The heading above the list of downloadable products."
    links_title: String
    "A number representing the product's manufacturer."
    manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    matching_headboard: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    material_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_bundle: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_depth: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_tention: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_turn: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    mpn: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    nocupboards: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    number_of_springs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    numberdrawers: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    optional_extras: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product url."
    product_url: String
    ranges: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of products to be displayed in a Related Products block."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    room_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    seat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    "The end date for a product with a special price."
    special_to_date: String
    split: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Stock status of the product"
    stock_status: ProductStockStatus
    stompa_colours: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The file name of a swatch image."
    swatch_image: String
    table_leg_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_leg_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_top_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    temperature_control_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    top_bunk_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_options: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    udropship_vendor: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Upsell Products"
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    wardrobe_doors: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
}

"Defines characteristics of a downloadable product."
type DownloadableProductLinks {
    id: Int @deprecated(reason: "This information should not be exposed on frontend.")
    is_shareable: Boolean @deprecated(reason: "This information should not be exposed on frontend.")
    link_type: DownloadableFileTypeEnum @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    number_of_downloads: Int @deprecated(reason: "This information should not be exposed on frontend.")
    "The price of the downloadable product."
    price: Float
    sample_file: String @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    sample_type: DownloadableFileTypeEnum @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    "The full URL to the downloadable sample."
    sample_url: String
    "A number indicating the sort order."
    sort_order: Int
    "The display name of the link."
    title: String
    "The unique ID for a `DownloadableProductLinks` object."
    uid: ID!
}

"Defines characteristics of a downloadable product."
type DownloadableProductSamples {
    id: Int @deprecated(reason: "This information should not be exposed on frontend.")
    sample_file: String @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    sample_type: DownloadableFileTypeEnum @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    "The full URL to the downloadable sample."
    sample_url: String
    "A number indicating the sort order."
    sort_order: Int
    "The display name of the sample."
    title: String
}

"A downloadable product wish list item."
type DownloadableWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "An array containing information about the selected links."
    links_v2: [DownloadableProductLinks]
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
    "An array containing information about the selected samples."
    samples: [DownloadableProductSamples]
}

"Contains the `uid`, `relative_url`, and `type` attributes."
type EntityUrl {
    canonical_url: String @deprecated(reason: "Use `relative_url` instead.")
    "The unique ID for a `ProductInterface`, `CategoryInterface`, `CmsPage`, or similar object associated with the specified URL. This could be a product, category, or CMS page UID."
    entity_uid: ID
    "The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID."
    id: Int @deprecated(reason: "Use `entity_uid` instead.")
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirectCode: Int
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
}

"Lists the exchange rate."
type ExchangeRate {
    "Specifies the store’s default currency to exchange to."
    currency_to: String
    "The exchange rate for the store’s default currency."
    rate: Float
}

type ExternalWordpressPost {
    name: String
    url: String
}

"A single FPT that can be applied to a product price."
type FixedProductTax {
    "The amount of the Fixed Product Tax."
    amount: Money
    "The display label assigned to the Fixed Product Tax."
    label: String
}

type Form {
    "Date Format"
    advanced_date_format: String
    "Google Api Key used for Google Map Field"
    advanced_google_key: String
    "The code of the custom form"
    code: String
    "Date when custom form created"
    created_at: String
    "Customer groups form displayed"
    customer_group: String
    "Get email address of customer from selected field"
    email_field: String
    "Hide Email field for logged in customer"
    email_field_hide: Boolean
    "The ID number assigned to the custom form"
    form_id: Int
    "Json contains all form fields"
    form_json: String
    "Json with titles of pages"
    form_title: String
    "Is GDPR consent enabled"
    gdpr_enabled: Boolean
    "GDPR text"
    gdpr_text: String
    "Is survey mode enabled"
    isSurvey: Boolean
    "Survey is disabled or survey is enabled and form available"
    is_form_available: Boolean
    "Text of button which trigger popup showing"
    popup_button: String
    "Show custom form in popup"
    popup_show: Boolean
    "If notifications need"
    send_notification: Boolean
    "Send notifications to"
    send_to: String
    "Status"
    status: Boolean
    "Stores where form displayed"
    store_id: String
    "Text of submit button"
    submit_button: String
    "Message displayed after submit form"
    success_message: String
    "Redirect url after submit"
    success_url: String
    "The title of the custom form"
    title: String
}

type GdprAnonymisePerformOutput {
    error: Boolean
    message: String
}

"Contains the generated customer token."
type GenerateCustomerTokenAsAdminOutput {
    "The generated customer token."
    customer_token: String!
}

type GiftCardPriceValue {
    currency: CurrencyEnum
    default: Float
    value: Float
}

"Contains the text of a gift message, its sender, and recipient"
type GiftMessage {
    "Sender name"
    from: String!
    "Gift message text"
    message: String!
    "Recipient name"
    to: String!
}

type GoogleTagManagerScripts {
    body: String
    footer: String
    head: String
}

"Defines a grouped product, which consists of simple standalone products that are presented as a group."
type GroupedProduct implements PhysicalProductInterface & ProductInterface & RoutableInterface {
    "Add to cart url."
    add_to_cart_url: String
    "Add to wishlist information."
    add_to_wishlist: String
    additional_features: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    assembly_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    available_colours: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    available_sizes: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    back_stock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    backstock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    barcode: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    base_slat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Custom data in bedkingdom website"
    bed_data: BedData
    benifts: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    chair_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    colour: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Crosssell Products"
    crosssell_products: [ProductInterface]
    delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    dimentions: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    dining_chairs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_drawers: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    exchange_return_upgrade: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    feet_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    filling_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    fold_mechanism: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    free_delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    furniture_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    ggiftcard_amount_config: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Indicates whether a gift message is available."
    gift_message_available: String
    gtin: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    guarantee: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    headboard_included: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    "An array containing grouped product items."
    items: [GroupedProductItem]
    ladder: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    leg_diameter: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    length: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number representing the product's manufacturer."
    manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    matching_headboard: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    material_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_bundle: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_depth: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_tention: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_turn: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    mpn: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    nocupboards: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    number_of_springs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    numberdrawers: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    optional_extras: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product url."
    product_url: String
    ranges: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of products to be displayed in a Related Products block."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    room_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    seat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    "The end date for a product with a special price."
    special_to_date: String
    split: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Stock status of the product"
    stock_status: ProductStockStatus
    stompa_colours: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The file name of a swatch image."
    swatch_image: String
    table_leg_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_leg_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_top_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    temperature_control_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    top_bunk_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_options: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    udropship_vendor: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Upsell Products"
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    wardrobe_doors: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

"Contains information about an individual grouped product item."
type GroupedProductItem {
    "The relative position of this item compared to the other group items."
    position: Int
    "Details about this product option."
    product: ProductInterface
    "The quantity of this grouped product item."
    qty: Float
}

"A grouped product wish list item."
type GroupedProductWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

"Contains the secure URL used for the Payments Pro Hosted Solution payment method."
type HostedProUrl {
    "The secure URL generated by PayPal."
    secure_form_url: String
}

"Contains target path parameters."
type HttpQueryParameter {
    "A parameter name."
    name: String
    "A parameter value."
    value: String
}

type ImageDetail {
    height: String
    img: String
    width: String
}

type ImageSwatchData implements SwatchDataInterface {
    "The URL assigned to the thumbnail of the swatch image."
    thumbnail: String
    "The value can be represented as color (HEX code), image link, or text."
    value: String
}

"Contains an error message when an internal error occurred."
type InternalError implements ErrorInterface {
    "The returned error message."
    message: String!
}

"Contains invoice details."
type Invoice {
    "Comments on the invoice."
    comments: [SalesCommentItem]
    "The unique ID for a `Invoice` object."
    id: ID!
    "Invoiced product details."
    items: [InvoiceItemInterface]
    "Sequential invoice number."
    number: String!
    "Invoice total amount details."
    total: InvoiceTotal
}

type InvoiceItem implements InvoiceItemInterface {
    "Information about the final discount amount for the base product, including discounts on options."
    discounts: [Discount]
    "The unique ID for an `InvoiceItemInterface` object."
    id: ID!
    "Details about an individual order item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of invoiced items."
    quantity_invoiced: Float
}

"Contains price details from an invoice."
type InvoiceTotal {
    "The final base grand total amount in the base currency."
    base_grand_total: Money!
    "The applied discounts to the invoice."
    discounts: [Discount]
    "The final total amount, including shipping, discounts, and taxes."
    grand_total: Money!
    "Details about the shipping and handling costs for the invoice."
    shipping_handling: ShippingHandling
    "The subtotal of the invoice, excluding shipping, discounts, and taxes."
    subtotal: Money!
    "The invoice tax details."
    taxes: [TaxItem]
    "The shipping amount for the invoice."
    total_shipping: Money!
    "The amount of tax applied to the invoice."
    total_tax: Money!
}

"Contains the result of the `isEmailAvailable` query."
type IsEmailAvailableOutput {
    "Indicates whether the specified email address can be used to create a customer."
    is_email_available: Boolean
}

"A list of options of the selected bundle product."
type ItemSelectedBundleOption {
    "The unique ID for a `ItemSelectedBundleOption` object."
    id: ID! @deprecated(reason: "Use `uid` instead.")
    "The label of the option."
    label: String!
    "The unique ID for a `ItemSelectedBundleOption` object."
    uid: ID!
    "A list of products that represent the values of the parent option."
    values: [ItemSelectedBundleOptionValue]
}

"A list of values for the selected bundle product."
type ItemSelectedBundleOptionValue {
    "The unique ID for a `ItemSelectedBundleOptionValue` object."
    id: ID! @deprecated(reason: "Use `uid` instead.")
    "The price of the child bundle product."
    price: Money!
    "The name of the child bundle product."
    product_name: String!
    "The SKU of the child bundle product."
    product_sku: String!
    "The number of this bundle product that were ordered."
    quantity: Float!
    "The unique ID for a `ItemSelectedBundleOptionValue` object."
    uid: ID!
}

"Contains a key-value pair."
type KeyValue {
    "The name part of the key/value pair."
    name: String
    "The value part of the key/value pair."
    value: String
}

type Landing implements RoutableInterface {
    "Landing conditions."
    conditions_serialized: String
    "Landing creation time."
    creation_time: String
    "Default Product Listing Sort By."
    default_sort_by: String
    "Landing dynamic category id."
    dynamic_category_id: Int
    "Landing dynamic category url."
    dynamic_category_url: String
    "Landing identifier."
    identifier: String
    "Landing is active."
    is_active: Int
    "Landing bottom description."
    layout_bottom_description: String
    "Landing columns count."
    layout_columns_count: Int
    "Landing image."
    layout_file: String
    "Landing image alt."
    layout_file_alt: String
    "Landing layout heading."
    layout_heading: String
    "Landing include navigation."
    layout_include_navigation: Boolean
    "Landing bottom static block."
    layout_static_bottom: String
    "Landing top static block."
    layout_static_top: String
    "Landing top description."
    layout_top_description: String
    "Layout Update XML."
    layout_update_xml: String
    "Landing meta data."
    meta_data: String
    "Landing id."
    page_id: Int
    "Landing layout."
    page_layout: String
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "Landing sort order."
    sort_order: String
    "Landing store ids."
    store_id: [Int]
    "Landing title."
    title: String
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "Landing last update time."
    update_time: String
}

"Contains information for rendering layered navigation."
type LayerFilter {
    "An array of filter items."
    filter_items: [LayerFilterItemInterface] @deprecated(reason: "Use `Aggregation.options` instead.")
    "The count of filter items in filter group."
    filter_items_count: Int @deprecated(reason: "Use `Aggregation.count` instead.")
    "The name of a layered navigation filter."
    name: String @deprecated(reason: "Use `Aggregation.label` instead.")
    "The request variable name for a filter query."
    request_var: String @deprecated(reason: "Use `Aggregation.attribute_code` instead.")
}

type LayerFilterItem implements LayerFilterItemInterface {
    "The count of items per filter."
    items_count: Int @deprecated(reason: "Use `AggregationOption.count` instead.")
    "The label for a filter."
    label: String @deprecated(reason: "Use `AggregationOption.label` instead.")
    "The value of a filter request variable to be used in query."
    value_string: String @deprecated(reason: "Use `AggregationOption.value` instead.")
}

type MagefanBlogPost {
    name: String
    url: String
}

type MageplazaBlogPost {
    name: String
    url: String
}

"Defines characteristics about images and videos associated with a specific product."
type MediaGalleryEntry {
    "Details about the content of the media gallery item."
    content: ProductMediaGalleryEntriesContent
    "Indicates whether the image is hidden from view."
    disabled: Boolean
    "The path of the image on the server."
    file: String
    "The identifier assigned to the object."
    id: Int @deprecated(reason: "Use `uid` instead.")
    "The alt text displayed on the storefront when the user points to the image."
    label: String
    "Either `image` or `video`."
    media_type: String
    "The media item's position after it has been sorted."
    position: Int
    "Array of image types. It can have the following values: image, small_image, thumbnail."
    types: [String]
    "The unique ID for a `MediaGalleryEntry` object."
    uid: ID!
    "Details about the content of a video item."
    video_content: ProductMediaGalleryEntriesVideoContent
}

type MegamenuItemsOutput {
    after_html: String
    align: String
    animation_in: String
    animation_time: String
    before_html: String
    bg_color: String
    bg_hover_color: String
    caret: String
    category: String
    child_col: String
    child_col_type: String
    children: [MegamenuItemsOutput]
    classes: String
    color: String
    content_html: String
    content_type: String
    content_width: String
    disable_bellow: String
    dropdown_bgcolor: String
    dropdown_bgimage: String
    dropdown_bgimagerepeat: String
    dropdown_bgpositionx: String
    dropdown_bgpositiony: String
    dropdown_inlinecss: String
    footer_html: String
    header_html: String
    hover_caret: String
    hover_color: String
    hover_icon: String
    htmlId: String
    icon: String
    icon_classes: String
    icon_position: String
    id: String
    inline_css: String
    is_group: String
    isgroup_level: String
    item_id: String
    left_sidebar_html: String
    left_sidebar_width: String
    link: String
    link_type: String
    menu_id: String
    name: String
    parentcat: String
    path: String
    right_sidebar_html: String
    right_sidebar_width: String
    show_content: String
    show_footer: String
    show_header: String
    show_icon: String
    show_left_sidebar: String
    show_name: String
    show_right_sidebar: String
    status: String
    sub_height: String
    sub_width: String
    submenu_sorttype: String
    tab_position: String
    target: String
    url_key: String
    url_path: String
}

type MirasvitKbArticle {
    name: String
    url: String
}

"Defines a monetary value, including a numeric value and a currency code."
type Money {
    "A three-letter currency code, such as USD or EUR."
    currency: CurrencyEnum
    "A number expressing a monetary value."
    value: Float
}

type MoreFromBrand {
    "An array of products"
    items: [ProductInterface]
    title: String
}

type Mutation {
    "Leave a comment to the post"
    AmBlogLeaveComment(input: AmBlogLeaveCommentInput): AmBlogLeaveCommentOutput
    "Leave a vote to the post"
    AmBlogLeaveVote(input: AmBlogLeaveVoteInput): AmBlogLeaveVoteOutput
    "Add gift card account to customer's account"
    addAmGiftCardCodeToAccount(input: AmGiftCardCodeInAccountInput): AmGiftCardMutationCommonOutput
    "Add gift card product to specified cart"
    addAmGiftCardProductsToCart(input: AddAmGiftCardProductsToCartInput): AddAmGiftCardProductsToCartOutput
    "Add one or more bundle products to the specified cart. We recommend using `addProductsToCart` instead."
    addBundleProductsToCart(
        "An input object that defines which bundle products to add to the cart."
        input: AddBundleProductsToCartInput
    ): AddBundleProductsToCartOutput
    "Add one or more configurable products to the specified cart. We recommend using `addProductsToCart` instead."
    addConfigurableProductsToCart(
        "An input object that defines which configurable products to add to the cart."
        input: AddConfigurableProductsToCartInput
    ): AddConfigurableProductsToCartOutput
    "Add one or more downloadable products to the specified cart. We recommend using `addProductsToCart` instead."
    addDownloadableProductsToCart(
        "An input object that defines which downloadable products to add to the cart."
        input: AddDownloadableProductsToCartInput
    ): AddDownloadableProductsToCartOutput
    addProductQuestion(input: ProductQuestionInput): ProductQuestionOutput
    "Add any type of product to the cart"
    addProductsToCart(
        "The cart ID of the shopper."
        cartId: String!,
        "An array that defines the products to add to the cart."
        cartItems: [CartItemInput!]!
    ): AddProductsToCartOutput
    "Add products to the specified compare list."
    addProductsToCompareList(
        "An input object that defines which products to add to an existing compare list."
        input: AddProductsToCompareListInput
    ): CompareList
    "Add one or more products to the specified wish list. This mutation supports all product types."
    addProductsToWishlist(
        "The ID of a wish list."
        wishlistId: ID!,
        "An array of products to add to the wish list."
        wishlistItems: [WishlistItemInput!]!
    ): AddProductsToWishlistOutput
    "Add one or more simple products to the specified cart. We recommend using `addProductsToCart` instead."
    addSimpleProductsToCart(
        "An input object that defines which simple products to add to the cart."
        input: AddSimpleProductsToCartInput
    ): AddSimpleProductsToCartOutput
    "Add one or more virtual products to the specified cart. We recommend using `addProductsToCart` instead."
    addVirtualProductsToCart(
        "An input object that defines which virtual products to add to the cart."
        input: AddVirtualProductsToCartInput
    ): AddVirtualProductsToCartOutput
    "Add items in the specified wishlist to the customer's cart."
    addWishlistItemsToCart(
        "The unique ID of the wish list"
        wishlistId: ID!,
        "An array of IDs representing products to be added to the cart. If no IDs are specified, all items in the wishlist will be added to the cart"
        wishlistItemIds: [ID!]
    ): AddWishlistItemsToCartOutput
    "Submit form"
    amCustomFormSubmit(input: AmFormSubmitInput): AmFormSubmitOutput
    "Apply a gift card code to the specified cart"
    applyAmGiftCardToCart(input: ApplyAmGiftCardToCartInput): ApplyAmGiftCardToCartOutput
    applyAndReplaceCouponToCart(input: ApplyCouponToCartInput): ApplyCouponToCartOutput
    "Apply a pre-defined coupon code to the specified cart."
    applyCouponToCart(
        "An input object that defines the coupon code to apply to the cart."
        input: ApplyCouponToCartInput
    ): ApplyCouponToCartOutput
    "Assign the specified compare list to the logged in customer."
    assignCompareListToCustomer(
        "The unique ID of the compare list to be assigned."
        uid: ID!
    ): AssignCompareListToCustomerOutput
    "Assign a logged-in customer to the specified guest shopping cart."
    assignCustomerToGuestCart(cart_id: String!): Cart!
    "Change the password for the logged-in customer."
    changeCustomerPassword(
        "The customer's original password."
        currentPassword: String!,
        "The customer's updated password."
        newPassword: String!
    ): Customer
    "Complete Checkout Session"
    completeCheckoutSession(amazonSessionId: String!, cartId: String!): CompleteCheckoutSessionOutput
    contactSubmit(input: ContactSubmitInput): ContactSubmitOutput
    "Creates an Clearpay Checkout."
    createClearpayCheckout(input: createClearpayCheckoutInput): createClearpayCheckoutOutput
    "Create a new compare list. The compare list is saved for logged in customers."
    createCompareList(input: CreateCompareListInput): CompareList
    "Create customer account"
    createCustomer(
        "An input object that defines the customer to be created."
        input: CustomerInput!
    ): CustomerOutput
    "Create a billing or shipping address for a customer or guest."
    createCustomerAddress(input: CustomerAddressInput!): CustomerAddress
    "Create customer account"
    createCustomerV2(
        "An input object that defines the customer to be created."
        input: CustomerCreateInput!
    ): CustomerOutput
    "Create an empty shopping cart for a guest or logged in user"
    createEmptyCart(
        "An optional input object that assigns the specified ID to the cart."
        input: createEmptyCartInput
    ): String
    "Creates a Klarna Payments Session."
    createKlarnaPaymentsSession(input: createKlarnaPaymentsSessionInput): CreateKlarnaPaymentsSessionOutput
    "Initiate a transaction and receive a token. Use this mutation for Payflow Pro and Payments Pro payment methods"
    createPayflowProToken(
        "An input object that defines the requirements to fetch payment token information."
        input: PayflowProTokenInput!
    ): CreatePayflowProTokenOutput
    "Initiate an Express Checkout transaction and receive a token. Use this mutation for Express Checkout and Payments Standard payment methods."
    createPaypalExpressToken(
        "An input object that defines the requirements to receive a payment token."
        input: PaypalExpressTokenInput!
    ): PaypalExpressTokenOutput
    "Create a product review for the specified product."
    createProductReview(
        "An input object that contains the details necessary to create a product review."
        input: CreateProductReviewInput!
    ): CreateProductReviewOutput!
    "Delete the specified compare list."
    deleteCompareList(
        "The unique ID of the compare list to be deleted."
        uid: ID!
    ): DeleteCompareListOutput
    "Delete the billing or shipping address of a customer."
    deleteCustomerAddress(
        "The ID of the customer address to be deleted."
        id: Int!
    ): Boolean
    "Delete a customer's payment token."
    deletePaymentToken(
        "The reusable payment token securely stored in the vault."
        public_hash: String!
    ): DeletePaymentTokenOutput
    gdprAnonymisePerform: GdprAnonymisePerformOutput
    "Generate a token for specified customer."
    generateCustomerToken(
        "The customer's email address."
        email: String!,
        "The customer's password."
        password: String!
    ): CustomerToken
    "Request a customer token so that an administrator can perform remote shopping assistance."
    generateCustomerTokenAsAdmin(
        "An input object that defines the customer email address."
        input: GenerateCustomerTokenAsAdminInput!
    ): GenerateCustomerTokenAsAdminOutput
    "Handle a payment response and save the payment in Quote. Use this mutation for Payflow Pro and Payments Pro payment methods."
    handlePayflowProResponse(
        "An input object that includes the payload returned by PayPal and the cart ID."
        input: PayflowProResponseInput!
    ): PayflowProResponseOutput
    "Transfer the contents of a guest cart into the cart of a logged-in customer."
    mergeCarts(
        "The cart ID after the guest logs in."
        destination_cart_id: String,
        "The guest's cart ID before they login."
        source_cart_id: String!
    ): Cart!
    "Convert the quote into an order."
    placeOrder(
        "An input object that defines the shopper's cart ID."
        input: PlaceOrderInput
    ): PlaceOrderOutput
    "Remove gift card account from customer's account"
    removeAmGiftCardCodeToAccount(input: AmGiftCardCodeInAccountInput): AmGiftCardMutationCommonOutput
    "Remove a gift card code from the specified cart"
    removeAmGiftCardFromCart(input: RemoveAmGiftCardFromCartInput): RemoveAmGiftCardFromCartOutput
    "Remove a previously-applied coupon from the cart. The cart must contain at least one item in order to remove the coupon."
    removeCouponFromCart(
        "An input object that defines which coupon code to remove from the cart."
        input: RemoveCouponFromCartInput
    ): RemoveCouponFromCartOutput
    "Delete the entire quantity of a specified item from the cart. If you remove all items from the cart, the cart continues to exist."
    removeItemFromCart(
        "An input object that defines which products to remove from the cart."
        input: RemoveItemFromCartInput
    ): RemoveItemFromCartOutput
    removeItemsFromCart(input: RemoveItemsFromCartInput): RemoveItemFromCartOutput
    "Remove products from the specified compare list."
    removeProductsFromCompareList(
        "An input object that defines which products to remove from a compare list."
        input: RemoveProductsFromCompareListInput
    ): CompareList
    "Remove one or more products from the specified wish list."
    removeProductsFromWishlist(
        "The ID of a wish list."
        wishlistId: ID!,
        "An array of item IDs representing products to be removed."
        wishlistItemsIds: [ID!]!
    ): RemoveProductsFromWishlistOutput
    "Add all products from a customer's previous order to the cart."
    reorderItems(orderNumber: String!): ReorderItemsOutput
    "Request an email with a reset password token for the registered customer identified by the specified email."
    requestPasswordResetEmail(
        "The customer's email address."
        email: String!
    ): Boolean
    "Reset a customer's password using the reset password token that the customer received in an email after requesting it using `requestPasswordResetEmail`."
    resetPassword(
        "The customer's email address."
        email: String!,
        "The customer's new password."
        newPassword: String!,
        "A runtime token generated by the `requestPasswordResetEmail` mutation."
        resetPasswordToken: String!
    ): Boolean
    "Revoke the customer token."
    revokeCustomerToken: RevokeCustomerTokenOutput
    saveChiakiConfig(input: ChiakiInput): ChiakiConfig
    "Send a message on behalf of a customer to the specified email addresses."
    sendEmailToFriend(
        "An input object that defines sender, recipients, and product."
        input: SendEmailToFriendInput
    ): SendEmailToFriendOutput
    "Set the billing address on a specific cart."
    setBillingAddressOnCart(
        "An input object that defines the billing address to be assigned to the cart."
        input: SetBillingAddressOnCartInput
    ): SetBillingAddressOnCartOutput
    "Set Customer Link"
    setCustomerLink(buyerToken: String!, password: String!): SetCustomerLinkOutput
    "Assign the email address of a guest to the cart."
    setGuestEmailOnCart(
        "An input object that defines a guest email address."
        input: SetGuestEmailOnCartInput
    ): SetGuestEmailOnCartOutput
    "Set the cart payment method and convert the cart into an order."
    setPaymentMethodAndPlaceOrder(input: SetPaymentMethodAndPlaceOrderInput): PlaceOrderOutput @deprecated(reason: "Should use setPaymentMethodOnCart and placeOrder mutations in single request.")
    "Apply a payment method to the cart."
    setPaymentMethodOnCart(
        "An input object that defines which payment method to apply to the cart."
        input: SetPaymentMethodOnCartInput
    ): SetPaymentMethodOnCartOutput
    "Set one or more shipping addresses on a specific cart."
    setShippingAddressesOnCart(
        "An input object that defines one or more shipping addresses to be assigned to the cart."
        input: SetShippingAddressesOnCartInput
    ): SetShippingAddressesOnCartOutput
    "Set one or more delivery methods on a cart."
    setShippingMethodsOnCart(
        "An input object that applies one or more shipping methods to the cart."
        input: SetShippingMethodsOnCartInput
    ): SetShippingMethodsOnCartOutput
    "Subscribe the specified email to the store's newsletter."
    subscribeEmailToNewsletter(
        "The email address that will receive the store's newsletter."
        email: String!
    ): SubscribeEmailToNewsletterOutput
    "Modify items in the cart."
    updateCartItems(
        "An input object that defines products to be updated."
        input: UpdateCartItemsInput
    ): UpdateCartItemsOutput
    "Update Checkout Session"
    updateCheckoutSession(amazonSessionId: String!, cartId: String!): UpdateCheckoutSessionOutput
    "Use `updateCustomerV2` instead."
    updateCustomer(
        "An input object that defines the customer characteristics to update."
        input: CustomerInput!
    ): CustomerOutput
    "Update the billing or shipping address of a customer or guest."
    updateCustomerAddress(
        "The ID assigned to the customer address."
        id: Int!,
        "An input object that contains changes to the customer address."
        input: CustomerAddressInput
    ): CustomerAddress
    "Change the email address for the logged-in customer."
    updateCustomerEmail(
        "The customer's email address."
        email: String!,
        "The customer's password."
        password: String!
    ): CustomerOutput
    "Update the customer's personal information."
    updateCustomerV2(
        "An input object that defines the customer characteristics to update."
        input: CustomerUpdateInput!
    ): CustomerOutput
    "Update one or more products in the specified wish list."
    updateProductsInWishlist(
        "The ID of a wish list."
        wishlistId: ID!,
        "An array of items to be updated."
        wishlistItems: [WishlistItemUpdateInput!]!
    ): UpdateProductsInWishlistOutput
    xnotifStock(input: XnotifInput): String
}

"Contains an error message when an invalid UID was specified."
type NoSuchEntityUidError implements ErrorInterface {
    "The returned error message."
    message: String!
    "The specified invalid unique ID of an object."
    uid: ID!
}

"Contains the order ID."
type Order {
    order_id: String @deprecated(reason: "Use `order_number` instead.")
    "The unique ID for an `Order` object."
    order_number: String!
}

"Contains detailed information about an order's billing and shipping addresses."
type OrderAddress {
    "The city or town."
    city: String!
    "The customer's company."
    company: String
    "The customer's country."
    country_code: CountryCodeEnum
    "The fax number."
    fax: String
    "The first name of the person associated with the shipping/billing address."
    firstname: String!
    "The family name of the person associated with the shipping/billing address."
    lastname: String!
    "The middle name of the person associated with the shipping/billing address."
    middlename: String
    "The customer's ZIP or postal code."
    postcode: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "The state or province name."
    region: String
    "The unique ID for a `Region` object of a pre-defined region."
    region_id: ID
    "An array of strings that define the street number and name."
    street: [String]!
    "A value such as Sr., Jr., or III."
    suffix: String
    "The telephone number."
    telephone: String
    "The customer's Value-added tax (VAT) number (for corporate customers)."
    vat_id: String
}

type OrderItem implements OrderItemInterface {
    additional_options: [OrderItemOption]
    "The final discount information for the product."
    discounts: [Discount]
    "The entered option for the base product, such as a logo or image."
    entered_options: [OrderItemOption]
    "The unique ID for an `OrderItemInterface` object."
    id: ID!
    "The name of the base product."
    product_name: String
    "The sale price of the base product, including selected options."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The type of product, such as simple, configurable, etc."
    product_type: String
    "URL key of the base product."
    product_url_key: String
    "The number of canceled items."
    quantity_canceled: Float
    "The number of invoiced items."
    quantity_invoiced: Float
    "The number of units ordered for this item."
    quantity_ordered: Float
    "The number of refunded items."
    quantity_refunded: Float
    "The number of returned items."
    quantity_returned: Float
    "The number of shipped items."
    quantity_shipped: Float
    "The selected options for the base product, such as color or size."
    selected_options: [OrderItemOption]
    "The status of the order item."
    status: String
}

"Represents order item options like selected or entered."
type OrderItemOption {
    "The name of the option."
    label: String!
    "The value of the option."
    value: String!
}

"Contains details about the payment method used to pay for the order."
type OrderPaymentMethod {
    "Additional data per payment method type."
    additional_data: [KeyValue]
    "The label that describes the payment method."
    name: String!
    "The payment method code that indicates how the order was paid for."
    type: String!
}

"Contains order shipment details."
type OrderShipment {
    "Comments added to the shipment."
    comments: [SalesCommentItem]
    "The unique ID for a `OrderShipment` object."
    id: ID!
    "An array of items included in the shipment."
    items: [ShipmentItemInterface]
    "The sequential credit shipment number."
    number: String!
    "An array of shipment tracking details."
    tracking: [ShipmentTracking]
}

"Contains details about the sales total amounts used to calculate the final price."
type OrderTotal {
    "The final base grand total amount in the base currency."
    base_grand_total: Money!
    "The applied discounts to the order."
    discounts: [Discount]
    "The final total amount, including shipping, discounts, and taxes."
    grand_total: Money!
    "Details about the shipping and handling costs for the order."
    shipping_handling: ShippingHandling
    "The subtotal of the order, excluding shipping, discounts, and taxes."
    subtotal: Money!
    "The order tax details."
    taxes: [TaxItem]
    "The shipping amount for the order."
    total_shipping: Money!
    "The amount of tax applied to the order."
    total_tax: Money!
}

type OwlCarouselSliderOutput {
    "Banner Config"
    banner_config: [BannerConfig]
    "Breakpoint Config"
    breakpoint_config: BreakpointConfig
    "Is gat Enable"
    is_gat_enabled: String
    "Media Url"
    media_url: String
    "Slider Config"
    slider_config: SliderConfig
    slider_id: Int
}

"Contains information used to generate PayPal iframe for transaction. Applies to Payflow Link and Payments Advanced payment methods."
type PayflowLinkToken {
    "The mode for the Payflow transaction."
    mode: PayflowLinkMode
    "The PayPal URL used for requesting a Payflow form."
    paypal_url: String
    "The secure token generated by PayPal."
    secure_token: String
    "The secure token ID generated by PayPal."
    secure_token_id: String
}

type PayflowProResponseOutput {
    "The cart with the updated selected payment method."
    cart: Cart!
}

"Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods."
type PayflowProToken {
    "The RESPMSG returned by PayPal. If the `result` is `0`, then `response_message` is `Approved`."
    response_message: String!
    "A non-zero value if any errors occurred."
    result: Int!
    "The RESULT returned by PayPal. A value of `0` indicates the transaction was approved."
    result_code: Int!
    "A secure token generated by PayPal."
    secure_token: String!
    "A secure token ID generated by PayPal."
    secure_token_id: String!
}

"The stored payment method available to the customer."
type PaymentToken {
    "A description of the stored account details."
    details: String
    "The payment method code associated with the token."
    payment_method_code: String!
    "The public hash of the token."
    public_hash: String!
    "Specifies the payment token type."
    type: PaymentTokenTypeEnum!
}

"Deprecated. Use `PaypalExpressTokenOutput` instead."
type PaypalExpressToken {
    "A set of URLs that allow the buyer to authorize payment and adjust checkout details."
    paypal_urls: PaypalExpressUrlList @deprecated(reason: "Use `PaypalExpressTokenOutput.paypal_urls` instead.")
    "The token returned by PayPal."
    token: String @deprecated(reason: "Use `PaypalExpressTokenOutput.token` instead.")
}

"Contains the token returned by PayPal and a set of URLs that allow the buyer to authorize payment and adjust checkout details. Applies to Express Checkout and Payments Standard payment methods."
type PaypalExpressTokenOutput {
    "A set of URLs that allow the buyer to authorize payment and adjust checkout details."
    paypal_urls: PaypalExpressUrlList
    "The token returned by PayPal."
    token: String
}

"Contains a set of URLs that allow the buyer to authorize payment and adjust checkout details for Express Checkout and Payments Standard transactions."
type PaypalExpressUrlList {
    "The PayPal URL that allows the buyer to edit their checkout details."
    edit: String
    "The URL to the PayPal login page."
    start: String
}

"Defines Pickup Location information."
type PickupLocation {
    city: String
    contact_name: String
    country_id: String
    description: String
    email: String
    fax: String
    latitude: Float
    longitude: Float
    name: String
    phone: String
    pickup_location_code: String
    postcode: String
    region: String
    region_id: Int
    street: String
}

"Top level object returned in a pickup locations search."
type PickupLocations {
    "An array of pickup locations that match the specific search request."
    items: [PickupLocation]
    "An object that includes the page_info and currentPage values specified in the query."
    page_info: SearchResultPageInfo
    "The number of products returned."
    total_count: Int
}

"Contains the results of the request to place an order."
type PlaceOrderOutput {
    "The ID of the order."
    order: Order!
}

"Deprecated. Use `ProductPrice` instead. Defines the price of a product as well as any tax-related adjustments."
type Price {
    "An array that provides information about tax, weee, or weee_tax adjustments."
    adjustments: [PriceAdjustment] @deprecated(reason: "Use `ProductPrice` instead.")
    "The price of a product plus a three-letter currency code."
    amount: Money @deprecated(reason: "Use `ProductPrice` instead.")
}

"Deprecated. Taxes will be included or excluded in the price. Defines the amount of money to apply as an adjustment, the type of adjustment to apply, and whether the item is included or excluded from the adjustment."
type PriceAdjustment {
    "The amount of the price adjustment and its currency code."
    amount: Money
    "Indicates whether the adjustment involves tax, weee, or weee_tax."
    code: PriceAdjustmentCodesEnum @deprecated(reason: "`PriceAdjustment` is deprecated.")
    "Indicates whether the entity described by the code attribute is included or excluded from the adjustment."
    description: PriceAdjustmentDescriptionEnum @deprecated(reason: "`PriceAdjustment` is deprecated.")
}

"Contains the price range for a product. If the product has a single price, the minimum and maximum price will be the same."
type PriceRange {
    "The highest possible price for the product."
    maximum_price: ProductPrice
    "The lowest possible price for the product."
    minimum_price: ProductPrice!
}

type ProductAttachment {
    file_size: String
    frontend_url: String
    icon_url: String
    label: String
    readable_file_size: String
}

"Contains a product attribute code and value."
type ProductAttribute {
    "The unique identifier for a product attribute code."
    code: String!
    "The display value of the attribute."
    value: String!
}

type ProductData {
    "Product add to cart URL."
    addToCartUrl: String
    "Product add to compare params."
    addToCompareParams: String
    "Product has required options."
    hasRequiredOptions: Boolean
    "Item id."
    id: Int
    "Product is salable."
    isSalable: Boolean
    "Product name."
    name: String
    "A PriceRange object, indicating the range of prices for the product"
    price_range: PriceRange!
    "Product URL."
    productUrl: String
    "Product SKU"
    sku: String!
    "The relative path to the product's small image."
    small_image: ProductImage
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
}

"Contains the discount applied to a product price."
type ProductDiscount {
    "The actual value of the discount."
    amount_off: Float
    "The discount expressed a percentage."
    percent_off: Float
}

"Contains product image information, including the image URL and label."
type ProductImage implements MediaGalleryInterface {
    "Indicates whether the image is hidden from view."
    disabled: Boolean
    "The label of the product image or video."
    label: String
    "The media item's position after it has been sorted."
    position: Int
    "The URL of the product image or video."
    url: String
}

"An implementation of `ProductLinksInterface`."
type ProductLinks implements ProductLinksInterface {
    "One of related, associated, upsell, or crosssell."
    link_type: String
    "The SKU of the linked product."
    linked_product_sku: String
    "The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable)."
    linked_product_type: String
    "The position within the list of product links."
    position: Int
    "The identifier of the linked product."
    sku: String
}

type ProductMattressOffers {
    description: String
    id: Int
    image: String
    name: String
    url: String
}

"Contains an image in base64 format and basic information about the image."
type ProductMediaGalleryEntriesContent {
    "The image in base64 format."
    base64_encoded_data: String
    "The file name of the image."
    name: String
    "The MIME type of the file, such as image/png."
    type: String
}

"Contains a link to a video file and basic information about the video."
type ProductMediaGalleryEntriesVideoContent {
    "Must be external-video."
    media_type: String
    "A description of the video."
    video_description: String
    "Optional data about the video."
    video_metadata: String
    "Describes the video source."
    video_provider: String
    "The title of the video."
    video_title: String
    "The URL to the video."
    video_url: String
}

type ProductMoreInformation {
    code: String
    label: String
    value: String
}

"Represents a product price."
type ProductPrice {
    "The price discount. Represents the difference between the regular and final price."
    discount: ProductDiscount
    "The final price of the product after applying discounts."
    final_price: Money!
    "An array of the multiple Fixed Product Taxes that can be applied to a product price."
    fixed_product_taxes: [FixedProductTax]
    "The regular price of the product."
    regular_price: Money!
}

"Deprecated. Use `PriceRange` instead. Contains the regular price of an item, as well as its minimum and maximum prices. Only composite products, which include bundle, configurable, and grouped products, can contain a minimum and maximum price."
type ProductPrices {
    "The highest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the `to` value."
    maximalPrice: Price @deprecated(reason: "Use `PriceRange.maximum_price` instead.")
    "The lowest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the `from` value."
    minimalPrice: Price @deprecated(reason: "Use `PriceRange.minimum_price` instead.")
    "The base price of a product."
    regularPrice: Price @deprecated(reason: "Use `regular_price` from `PriceRange.minimum_price` or `PriceRange.maximum_price` instead.")
}

type ProductQuestion {
    question_setting: QuestionSetting
    questions: [AnswerQuestion]
    total: Int
}

type ProductQuestionOutput {
    code: String
    message: String
}

"Contains details of a product review."
type ProductReview {
    "The average of all ratings for this product."
    average_rating: Float!
    "The date the review was created."
    created_at: String!
    "The customer's nickname. Defaults to the customer name, if logged in."
    nickname: String!
    "The reviewed product."
    product: ProductInterface!
    "An array of ratings by rating category, such as quality, price, and value."
    ratings_breakdown: [ProductReviewRating]!
    "The summary (title) of the review."
    summary: String!
    "The review text."
    text: String!
}

"Contains data about a single aspect of a product review."
type ProductReviewRating {
    "The label assigned to an aspect of a product that is being rated, such as quality or price."
    name: String!
    "The rating value given by customer. By default, possible values range from 1 to 5."
    value: String!
}

"Contains details about a single aspect of a product review."
type ProductReviewRatingMetadata {
    "An encoded rating ID."
    id: String!
    "The label assigned to an aspect of a product that is being rated, such as quality or price."
    name: String!
    "List of product review ratings sorted by position."
    values: [ProductReviewRatingValueMetadata]!
}

"Contains details about a single value in a product review."
type ProductReviewRatingValueMetadata {
    "A ratings scale, such as the number of stars awarded."
    value: String!
    "An encoded rating value ID."
    value_id: String!
}

"Contains an array of metadata about each aspect of a product review."
type ProductReviewRatingsMetadata {
    "An array of product reviews sorted by position."
    items: [ProductReviewRatingMetadata]!
}

"Contains an array of product reviews."
type ProductReviews {
    "An array of product reviews."
    items: [ProductReview]!
    "Metadata for pagination rendering."
    page_info: SearchResultPageInfo!
}

"Deprecated. Use `TierPrice` instead. Defines a tier price, which is a quantity discount offered to a specific customer group."
type ProductTierPrices {
    "The ID of the customer group."
    customer_group_id: String @deprecated(reason: "Not relevant for the storefront.")
    "The percentage discount of the item."
    percentage_value: Float @deprecated(reason: "Use `TierPrice.discount` instead.")
    "The number of items that must be purchased to qualify for tier pricing."
    qty: Float @deprecated(reason: "Use `TierPrice.quantity` instead.")
    "The price of the fixed price item."
    value: Float @deprecated(reason: "Use `TierPrice.final_price` instead.")
    "The ID assigned to the website."
    website_id: Float @deprecated(reason: "Not relevant for the storefront.")
}

"Contains information about a product video."
type ProductVideo implements MediaGalleryInterface {
    "Indicates whether the image is hidden from view."
    disabled: Boolean
    "The label of the product image or video."
    label: String
    "The media item's position after it has been sorted."
    position: Int
    "The URL of the product image or video."
    url: String
    "Contains a `ProductMediaGalleryEntriesVideoContent` object."
    video_content: ProductMediaGalleryEntriesVideoContent
}

"Contains the results of a `products` query."
type Products {
    "A bucket that contains the attribute code and label for each filterable option."
    aggregations(filter: AggregationsFilterInput): [Aggregation]
    "Layered navigation filters array."
    filters: [LayerFilter] @deprecated(reason: "Use `aggregations` instead.")
    "An array of products that match the specified search criteria."
    items: [ProductInterface]
    "An object that includes the page_info and currentPage values specified in the query."
    page_info: SearchResultPageInfo
    rich_snippets: String
    "An object that includes the default sort field and all available sort fields."
    sort_fields: SortFields
    "An array of search suggestions for case when search query have no results."
    suggestions: [SearchSuggestion]
    "The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not."
    total_count: Int
}

type Query {
    amBlogAuthor(
        "Author ID"
        id: Int
    ): AmBlogAuthor
    amBlogAuthors: AmBlogAuthors
    amBlogCategories: AmBlogCategories
    amBlogCategoriesWidget(
        "Categories Widget ID"
        id: Int
    ): AmBlogCategoriesWidget
    amBlogCategory(
        "Category ID"
        id: Int
    ): AmBlogCategory
    amBlogChildCategories(
        "Id of the category"
        id: Int
    ): AmBlogCategories
    amBlogComments(
        "Post ID if type 'list'"
        postId: Int,
        "An array of comments as 'list' or 'recent'"
        type: String
    ): AmBlogComments
    amBlogFeaturedPostsWidget(
        "Featured Posts Widget ID"
        id: Int
    ): AmBlogFeaturedPostsWidget
    amBlogPost(
        "Post ID"
        id: Int,
        "By Post url key. (Optional, used without post id)"
        urlKey: String
    ): AmBlogPost
    amBlogPostRelatedProducts(postId: Int!): AmBlogProducts
    amBlogPosts(
        "Optional for all page type, entity id"
        entityId: Int,
        "Page number"
        page: Int,
        "Blog Page type"
        type: AmBlogPageType
    ): AmBlogPosts
    amBlogPostsByCategoryId(
        "Category Id"
        categoryId: [Int]
    ): AmBlogPosts
    amBlogPostsByIds(
        "Blog post Ids"
        ids: [Int]
    ): AmBlogPosts
    amBlogPostsSearch(
        "Page number"
        page: Int,
        "Search Query"
        query: String
    ): AmBlogPosts
    amBlogRecentCommentsWidget(
        "Recent Comments Widget ID"
        id: Int
    ): AmBlogRecentCommentsWidget
    amBlogRecentPostsWidget(
        "Recent Posts Widget ID"
        id: Int
    ): AmBlogRecentPostsWidget
    amBlogRelatedPosts(productId: Int!): AmBlogPosts
    amBlogSetting: AmBlogSetting
    amBlogTags(
        "Post ID"
        postId: Int
    ): AmBlogTags
    amBlogTagsWidget(
        "Tags Widget ID"
        id: Int
    ): AmBlogTagsWidget
    amBrandGetMoreFromThisBrandBlock(
        "Product ID"
        productId: Int
    ): MoreFromBrand
    "Get gift card account information by code"
    amGiftCardAccount(input: AmGiftCardAccountInput!): AmGiftCardAccount
    "Get rendered email template for preview."
    amGiftCardPreview(input: AmGiftCardPreviewInput): AmGiftCardPreview
    "Get gift card module settings"
    amGiftCardSetting: AmGiftCardSettings
    amLabelProvider(
        "Label Mode"
        mode: AmLabelMode,
        "Product IDs"
        productIds: [Int]
    ): [AmLabelList]
    amLabelSetting: AmLabelSetting
    amMostviewedBundlePacks(
        "Product UID."
        uid: String
    ): AmMostviewedBundlePacks
    amMostviewedGroups(
        "Block Position."
        position: String,
        "Product|Category UID."
        uid: String!
    ): AmMostviewedRelatedRules
    amOrderList: [SortingOrder]
    "Get current user's gift card accounts."
    amUserGiftCardAccount: [AmGiftCardAccount]
    ambrandlist(
        "Show Brands without Products"
        displayZero: Boolean,
        "Image Height"
        imageHeight: Int,
        "Image Width"
        imageWidth: Int,
        "Show Count"
        showCount: Boolean
    ): BrandList
    ambrandslider(
        "Show Brands without Products"
        displayZero: Boolean,
        "Image Height"
        imageHeight: Int,
        "Image Width"
        imageWidth: Int,
        "Sort By"
        sortBy: String
    ): BrandSlider
    amfeaturedWidget(
        "Order direction."
        amsortingSortOrder: String!,
        "Conditions serialized."
        conditions: String!,
        "Current Page Nubmer."
        currentPage: Int,
        "Products count."
        productsCount: Int!,
        "Number of Products per Page"
        productsPerPage: Int,
        "Determine is pager enabled."
        showPager: Boolean,
        "Order code."
        sortBy: String!
    ): [ProductData]
    amlanding(
        "Landing Id"
        id: Int!
    ): Landing
    "Get a list of available store views and their config information."
    availableStores(
        "Filter store views by the current store group."
        useCurrentGroup: Boolean
    ): [StoreConfig]
    calculateDeliveryNextDay(
        "Product Id"
        productId: Int!
    ): DeliveryNextDay
    "Return information about the specified shopping cart."
    cart(
        "The unique ID of the cart to query."
        cart_id: String!
    ): Cart
    "Return a list of categories that match the specified filter."
    categories(
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Identifies which Category filter inputs to search for and return."
        filters: CategoryFilterInput,
        "Specifies the maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20
    ): CategoryResult
    "Search for categories that match the criteria specified in the `search` and `filter` attributes."
    category(
        "The category ID to use as the root of the search."
        id: Int
    ): CategoryTree @deprecated(reason: "Use `categoryList` instead.")
    "Return an array of categories based on the specified filters."
    categoryList(
        "Identifies which Category filter inputs to search for and return."
        filters: CategoryFilterInput
    ): [CategoryTree]
    "Return Terms and Conditions configuration information."
    checkoutAgreements: [CheckoutAgreement]
    checkoutSessionConfig(cartId: String, omitPayloads: Boolean): CheckoutSessionConfigOutput
    checkoutSessionDetails(amazonSessionId: String!, queryTypes: [String!]): CheckoutSessionDetailsOutput
    checkoutSessionSignIn(buyerToken: String!): CheckoutSessionSignInOutput
    chiakiConfig(
        key: String,
        "Store ID"
        store_id: String,
        user_id: String!
    ): [ChiakiConfig]
    "The urlResolver query returns the relative URL for a specified product, category or CMS page, using as input a url_key appended by the url_suffix, if one exists"
    chiakiPageResolver(url: String!, userId: String!): ChiakiPage
    "Return information about CMS blocks."
    cmsBlocks(
        "An array of CMS block IDs."
        identifiers: [String]
    ): CmsBlocks
    "Return details about a CMS page."
    cmsPage(
        "The ID of the CMS page."
        id: Int,
        "The identifier of the CMS page."
        identifier: String
    ): CmsPage
    "Return products that have been added to the specified compare list."
    compareList(
        "The unique ID of the compare list to be queried."
        uid: ID!
    ): CompareList
    "The countries query provides information for all countries."
    countries: [Country]
    "The countries query provides information for a single country."
    country(id: String): Country
    "Return information about the store's currency."
    currency: Currency
    "Return the attribute type, given an attribute code and entity type."
    customAttributeMetadata(
        "An input object that specifies the attribute code and entity type to search."
        attributes: [AttributeInput!]!
    ): CustomAttributeMetadata
    "Return detailed information about a customer account."
    customer: Customer
    "Return information about the customer's shopping cart."
    customerCart: Cart!
    "Return a list of downloadable products the customer has purchased."
    customerDownloadableProducts: CustomerDownloadableProducts
    customerOrders: CustomerOrders @deprecated(reason: "Use the `customer` query instead.")
    "Return a list of customer payment tokens stored in the vault."
    customerPaymentTokens: CustomerPaymentTokens
    customform(
        "Custom Form ID"
        formId: Int
    ): Form
    defaultSorting(
        "Page type."
        pageType: PageTypeEnum!
    ): [SortingOrder]
    "get banner in homepage"
    getBannerHomepage(sliderId: Int!): OwlCarouselSliderOutput
    getGoogleTagManager: GoogleTagManagerScripts
    "Retrieve the secure PayPal URL for a Payments Pro Hosted Solution transaction."
    getHostedProUrl(
        "An input object that specifies the cart ID."
        input: HostedProUrlInput!
    ): HostedProUrl
    "get menu items"
    getMenuItems(menuId: Int!): [MegamenuItemsOutput]
    "Retrieve payment credentials for a transaction. Use this query for Payflow Link and Payments Advanced payment methods."
    getPayflowLinkToken(
        "An input object that defines the requirements to receive a payment token."
        input: PayflowLinkTokenInput!
    ): PayflowLinkToken
    getProductAttachments(
        "Product Id"
        productId: Int!
    ): [ProductAttachment]
    getProductMattressOffers(
        "Product Id"
        productId: Int!
    ): [ProductMattressOffers]
    getProductMoreInformation(
        "Product Id"
        productId: Int!
    ): [ProductMoreInformation]
    getProductQuestions(
        "Specifies which page of results to return."
        currentPage: Int = 1,
        "Product Id"
        productId: Int!
    ): ProductQuestion
    getRichSnippets: String
    getTopSearches(storeIds: String, totalSearchTerms: Int): [SearchTerms]
    getTrustpilotBusinessReviews: TrustpilotBusinessReviewsResponse
    getTrustpilotProductReviewsDetail(
        "Specifies which page of results to return."
        currentPage: Int = 1,
        "Specifies the maximum number of results to return at once."
        pageSize: Int = 10,
        "Product Id"
        productId: Int!,
        "Filter with star"
        stars: String
    ): TrustpilotProductReviewsDetail
    "Check whether the specified email has already been used to create a customer account."
    isEmailAvailable(
        "The email address to check."
        email: String!
    ): IsEmailAvailableOutput
    "The pickup locations query searches for locations that match the search request requirements."
    pickupLocations(
        "Perform search by location using radius and search term."
        area: AreaInput,
        "Specifies which page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Apply filters by attributes."
        filters: PickupLocationFilterInput,
        "The maximum number of pickup locations to return at once. The attribute is optional."
        pageSize: Int = 20,
        "Information about products which should be delivered."
        productsInfo: [ProductInfoInput],
        "Specifies which attribute to sort on, and whether to return the results in ascending or descending order."
        sort: PickupLocationSortInput
    ): PickupLocations
    "Return the active ratings attributes and the values each rating can have."
    productReviewRatingsMetadata: ProductReviewRatingsMetadata!
    "Search for products that match the criteria specified in the `search` and `filter` attributes."
    products(
        "The page of results to return. The default value is 1."
        currentPage: Int = 1,
        "Current Url"
        currentUrl: String,
        "The product attributes to search for and return."
        filter: ProductAttributeFilterInput,
        "The maximum number of results to return at once. The default value is 20."
        pageSize: Int = 20,
        "One or more keywords to use in a full-text search."
        search: String,
        "Specifies which attributes to sort on, and whether to return the results in ascending or descending order."
        sort: ProductAttributeSortInput
    ): Products
    "Return the full details for a specified product, category, or CMS page."
    route(
        "A `url_key` appended by the `url_suffix, if one exists."
        url: String!
    ): RoutableInterface
    search(query: String): SearchResult
    "Return details about the store's configuration."
    storeConfig: StoreConfig
    "Return the relative URL for a specified product, category or CMS page."
    urlResolver(
        "A `url_key` appended by the `url_suffix, if one exists."
        url: String!
    ): EntityUrl @deprecated(reason: "Use the `route` query instead.")
    "Return the contents of a customer's wish list."
    wishlist: WishlistOutput @deprecated(reason: "Moved under `Customer.wishlist`.")
}

type QuestionSetting {
    gdpr_enable: Boolean
    gdpr_text: String
    is_allow_unregistered_customer_ask: Boolean
    is_notify_user: Boolean
    is_show_ask_question_form: Boolean
    page_size: Int
}

type Region {
    "The two-letter code for the region, such as TX for Texas."
    code: String
    "The unique ID for a `Region` object."
    id: Int
    "The name of the region, such as Texas."
    name: String
}

"Defines the possible output for the removeGiftCardFromCart mutation"
type RemoveAmGiftCardFromCartOutput {
    "Describes the contents of the specified shopping cart"
    cart: Cart!
}

"Contains details about the cart after removing a coupon."
type RemoveCouponFromCartOutput {
    "The cart after removing a coupon."
    cart: Cart
}

"Contains details about the cart after removing an item."
type RemoveItemFromCartOutput {
    "The cart after removing an item."
    cart: Cart!
}

"Contains the customer's wish list and any errors encountered."
type RemoveProductsFromWishlistOutput {
    "An array of errors encountered while deleting products from a wish list."
    user_errors: [WishListUserInputError]!
    "Contains the wish list with after items were successfully deleted."
    wishlist: Wishlist!
}

"Contains the cart and any errors after adding products."
type ReorderItemsOutput {
    "Detailed information about the customer's cart."
    cart: Cart!
    "An array of reordering errors."
    userInputErrors: [CheckoutUserInputError]!
}

"Contains the result of a request to revoke a customer token."
type RevokeCustomerTokenOutput {
    "The result of a request to revoke a customer token."
    result: Boolean!
}

"Contains details about a comment."
type SalesCommentItem {
    "The text of the message."
    message: String!
    "The timestamp of the comment."
    timestamp: String!
}

type SalesItemInterface {
    "The entered gift message for the order item"
    gift_message: GiftMessage
}

type SearchResult {
    aheadworks_blog_post: SearchResultAheadworksBlogPost
    amasty_blog_post: SearchResultAmastyBlogPost
    amasty_faq_question: SearchResultAmastyFaqQuestion
    catalogsearch_fulltext: SearchResultMagentoCatalogProduct
    external_wordpress_post: SearchResultExternalWordpressPost
    magefan_blog_post: SearchResultMagefanBlogPost
    magento_catalog_attribute: SearchResultMagentoCatalogAttribute
    magento_catalog_attribute_2: SearchResultMagentoCatalogAttribute_2
    magento_catalog_attribute_3: SearchResultMagentoCatalogAttribute_3
    magento_catalog_attribute_4: SearchResultMagentoCatalogAttribute_4
    magento_catalog_attribute_5: SearchResultMagentoCatalogAttribute_5
    magento_catalog_category: SearchResultMagentoCatalogCategory
    magento_cms_page: SearchResultMagentoCmsPage
    mageplaza_blog_post: SearchResultMageplazaBlogPost
    mirasvit_kb_article: SearchResultMirasvitKbArticle
}

type SearchResultAheadworksBlogPost {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [AheadworksBlogPost]
    position: Int
    size: Int
    title: String
}

type SearchResultAmastyBlogPost {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [AmastyBlogPost]
    position: Int
    size: Int
    title: String
}

type SearchResultAmastyFaqQuestion {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [AmastyFaqQuestion]
    position: Int
    size: Int
    title: String
}

type SearchResultExternalWordpressPost {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [ExternalWordpressPost]
    position: Int
    size: Int
    title: String
}

type SearchResultMagefanBlogPost {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [MagefanBlogPost]
    position: Int
    size: Int
    title: String
}

type SearchResultMagentoCatalogAttribute {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [AttributeOption]
    position: Int
    size: Int
    title: String
}

type SearchResultMagentoCatalogAttribute_2 {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [AttributeOption]
    position: Int
    size: Int
    title: String
}

type SearchResultMagentoCatalogAttribute_3 {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [AttributeOption]
    position: Int
    size: Int
    title: String
}

type SearchResultMagentoCatalogAttribute_4 {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [AttributeOption]
    position: Int
    size: Int
    title: String
}

type SearchResultMagentoCatalogAttribute_5 {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [AttributeOption]
    position: Int
    size: Int
    title: String
}

type SearchResultMagentoCatalogCategory {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [CategoryInterface]
    position: Int
    size: Int
    title: String
}

type SearchResultMagentoCatalogProduct {
    aggregations: [Aggregation]
    identifier: String
    items(currentPage: Int = 1, filter: ProductAttributeFilterInput, pageSize: Int = 20, sort: ProductAttributeSortInput): [ProductInterface]
    position: Int
    size: Int
    title: String
}

type SearchResultMagentoCmsPage {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [CmsPage]
    position: Int
    size: Int
    title: String
}

type SearchResultMageplazaBlogPost {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [MageplazaBlogPost]
    position: Int
    size: Int
    title: String
}

type SearchResultMirasvitKbArticle {
    identifier: String
    items(currentPage: Int = 1, pageSize: Int = 20): [MirasvitKbArticle]
    position: Int
    size: Int
    title: String
}

"Provides navigation for the query response."
type SearchResultPageInfo {
    "The specific page to return."
    current_page: Int
    "The maximum number of items to return per page of results."
    page_size: Int
    "The total number of pages in the response."
    total_pages: Int
}

"A string that contains search suggestion"
type SearchSuggestion {
    "The search suggestion of existing product."
    search: String!
}

type SearchTerms {
    num_results: String
    popularity: String
    query_id: String
    query_text: String
    redirect: String
}

"Contains details about a selected bundle option."
type SelectedBundleOption {
    id: Int! @deprecated(reason: "Use `uid` instead")
    "The display name of the selected bundle product option."
    label: String!
    "The type of selected bundle product option."
    type: String!
    "The unique ID for a `SelectedBundleOption` object"
    uid: ID!
    "An array of selected bundle option values."
    values: [SelectedBundleOptionValue]!
}

"Contains details about a value for a selected bundle option."
type SelectedBundleOptionValue {
    "Use `uid` instead"
    id: Int!
    "The display name of the value for the selected bundle product option."
    label: String!
    "The price of the value for the selected bundle product option."
    price: Float!
    "The quantity of the value for the selected bundle product option."
    quantity: Float!
    "The unique ID for a `SelectedBundleOptionValue` object"
    uid: ID!
}

"Contains details about a selected configurable option."
type SelectedConfigurableOption {
    "The unique ID for a `ConfigurableProductOptions` object."
    configurable_product_option_uid: ID!
    "The unique ID for a `ConfigurableProductOptionsValues` object."
    configurable_product_option_value_uid: ID!
    id: Int! @deprecated(reason: "Use `SelectedConfigurableOption.configurable_product_option_uid` instead.")
    "The display text for the option."
    option_label: String!
    value_id: Int! @deprecated(reason: "Use `SelectedConfigurableOption.configurable_product_option_value_uid` instead.")
    "The display name of the selected configurable option."
    value_label: String!
}

"Identifies a customized product that has been placed in a cart."
type SelectedCustomizableOption {
    "The unique ID for a specific `CustomizableOptionInterface` object, such as a `CustomizableFieldOption`, `CustomizableFileOption`, or `CustomizableAreaOption` object."
    customizable_option_uid: ID!
    id: Int! @deprecated(reason: "Use `SelectedCustomizableOption.customizable_option_uid` instead.")
    "Indicates whether the customizable option is required."
    is_required: Boolean!
    "The display name of the selected customizable option."
    label: String!
    "A value indicating the order to display this option."
    sort_order: Int!
    "The type of `CustomizableOptionInterface` object."
    type: String!
    "An array of selectable values."
    values: [SelectedCustomizableOptionValue]!
}

"Identifies the value of the selected customized option."
type SelectedCustomizableOptionValue {
    "The unique ID for a value object that corresponds to the object represented by the `customizable_option_uid` attribute."
    customizable_option_value_uid: ID!
    id: Int! @deprecated(reason: "Use `SelectedCustomizableOptionValue.customizable_option_value_uid` instead.")
    "The display name of the selected value."
    label: String!
    "The price of the selected customizable value."
    price: CartItemSelectedOptionValuePrice!
    "The text identifying the selected value."
    value: String!
}

"Describes the payment method the shopper selected."
type SelectedPaymentMethod {
    "The payment method code."
    code: String!
    "The purchase order number."
    purchase_order_number: String
    "The payment method title."
    title: String!
}

"Contains details about the selected shipping method and carrier."
type SelectedShippingMethod {
    "The cost of shipping using this shipping method."
    amount: Money!
    base_amount: Money @deprecated(reason: "The field should not be used on the storefront.")
    "A string that identifies a commercial carrier or an offline shipping method."
    carrier_code: String!
    "The label for the carrier code."
    carrier_title: String!
    "A shipping method code associated with a carrier."
    method_code: String!
    "The label for the method code."
    method_title: String!
}

"Contains information about the sender and recipients."
type SendEmailToFriendOutput {
    "An array containing information about each recipient."
    recipients: [SendEmailToFriendRecipient]
    "Information about the customer and the content of the message."
    sender: SendEmailToFriendSender
}

"An output object that contains information about the recipient."
type SendEmailToFriendRecipient {
    "The email address of the recipient."
    email: String!
    "The name of the recipient."
    name: String!
}

"An output object that contains information about the sender."
type SendEmailToFriendSender {
    "The email address of the sender."
    email: String!
    "The text of the message to be sent."
    message: String!
    "The name of the sender."
    name: String!
}

"Contains details about the configuration of the Email to a Friend feature."
type SendFriendConfiguration {
    "Indicates whether the Email to a Friend feature is enabled."
    enabled_for_customers: Boolean!
    "Indicates whether the Email to a Friend feature is enabled for guests."
    enabled_for_guests: Boolean!
}

"Contains details about the cart after setting the billing address."
type SetBillingAddressOnCartOutput {
    "The cart after setting the billing address."
    cart: Cart!
}

type SetCustomerLinkOutput {
    customer_bearer_token: String
    customer_email: String
    customer_firstname: String
    customer_id: String
    customer_last: String
    message: String
    success: Boolean
}

"Contains details about the cart after setting the email of a guest."
type SetGuestEmailOnCartOutput {
    "The cart after setting the guest email."
    cart: Cart!
}

"Contains details about the cart after setting the payment method."
type SetPaymentMethodOnCartOutput {
    "The cart after setting the payment method."
    cart: Cart!
}

"Contains details about the cart after setting the shipping addresses."
type SetShippingAddressesOnCartOutput {
    "The cart after setting the shipping addresses."
    cart: Cart!
}

"Contains details about the cart after setting the shipping methods."
type SetShippingMethodsOnCartOutput {
    "The cart after setting the shipping methods."
    cart: Cart!
}

type ShipmentItem implements ShipmentItemInterface {
    "The unique ID for a `ShipmentItemInterface` object."
    id: ID!
    "The order item associated with the shipment item."
    order_item: OrderItemInterface
    "The name of the base product."
    product_name: String
    "The sale price for the base product."
    product_sale_price: Money!
    "The SKU of the base product."
    product_sku: String!
    "The number of shipped items."
    quantity_shipped: Float!
}

"Contains order shipment tracking details."
type ShipmentTracking {
    "The shipping carrier for the order delivery."
    carrier: String!
    "The tracking number of the order shipment."
    number: String
    "The shipment tracking title."
    title: String!
}

"Contains shipping addresses and methods."
type ShippingCartAddress implements CartAddressInterface {
    "An array that lists the shipping methods that can be applied to the cart."
    available_shipping_methods: [AvailableShippingMethod]
    cart_items: [CartItemQuantity] @deprecated(reason: "Use `cart_items_v2` instead.")
    "An array that lists the items in the cart."
    cart_items_v2: [CartItemInterface]
    "The city specified for the billing or shipping address."
    city: String!
    "The company specified for the billing or shipping address."
    company: String
    "An object containing the country label and code."
    country: CartAddressCountry!
    "Text provided by the shopper."
    customer_notes: String
    "The first name of the customer or guest."
    firstname: String!
    items_weight: Float @deprecated(reason: "This information should not be exposed on the frontend.")
    "The last name of the customer or guest."
    lastname: String!
    pickup_location_code: String
    "The ZIP or postal code of the billing or shipping address."
    postcode: String
    "An object containing the region label and code."
    region: CartAddressRegion
    "An object that describes the selected shipping method."
    selected_shipping_method: SelectedShippingMethod
    "An array containing the street for the billing or shipping address."
    street: [String]!
    "The telephone number for the billing or shipping address."
    telephone: String
}

"Defines an individual shipping discount. This discount can be applied to shipping."
type ShippingDiscount {
    "The amount of the discount."
    amount: Money!
}

"Contains details about shipping and handling costs."
type ShippingHandling {
    "The shipping amount, excluding tax."
    amount_excluding_tax: Money
    "The shipping amount, including tax."
    amount_including_tax: Money
    "The applied discounts to the shipping."
    discounts: [ShippingDiscount]
    "Details about taxes applied for shipping."
    taxes: [TaxItem]
    "The total amount for shipping."
    total_amount: Money!
}

"An implementation for simple product cart items."
type SimpleCartItem implements CartItemInterface {
    "An array containing the customizable options the shopper selected."
    customizable_options: [SelectedCustomizableOption]!
    date_picker: String
    delivery_warning: String
    "An array of errors encountered while loading the cart item"
    errors: [CartItemError]
    "The entered gift message for the cart item"
    gift_message: GiftMessage
    id: String! @deprecated(reason: "Use `uid` instead.")
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"Defines a simple product, which is tangible and is usually sold in single units or in fixed quantities."
type SimpleProduct implements CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface {
    "Add to cart url."
    add_to_cart_url: String
    "Add to wishlist information."
    add_to_wishlist: String
    additional_features: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    assembly_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    available_colours: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    available_sizes: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    back_stock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    backstock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    barcode: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    base_slat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Custom data in bedkingdom website"
    bed_data: BedData
    benifts: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    chair_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    colour: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Crosssell Products"
    crosssell_products: [ProductInterface]
    delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    dimentions: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    dining_chairs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_drawers: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    exchange_return_upgrade: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    feet_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    filling_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    fold_mechanism: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    free_delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    furniture_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    ggiftcard_amount_config: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Indicates whether a gift message is available."
    gift_message_available: String
    gtin: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    guarantee: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    headboard_included: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    ladder: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    leg_diameter: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    length: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number representing the product's manufacturer."
    manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    matching_headboard: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    material_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_bundle: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_depth: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_tention: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_turn: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    mpn: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    nocupboards: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    number_of_springs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    numberdrawers: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    optional_extras: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product url."
    product_url: String
    ranges: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of products to be displayed in a Related Products block."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    room_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    seat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    "The end date for a product with a special price."
    special_to_date: String
    split: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Stock status of the product"
    stock_status: ProductStockStatus
    stompa_colours: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The file name of a swatch image."
    swatch_image: String
    table_leg_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_leg_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_top_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    temperature_control_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    top_bunk_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_options: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    udropship_vendor: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Upsell Products"
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    wardrobe_doors: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
    "The weight of the item, in units defined by the store."
    weight: Float
}

"Contains a simple product wish list item."
type SimpleWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

type SliderConfig {
    URLhashListener: String
    autoHeight: String
    autoplay: String
    autoplayHoverPause: String
    autoplayTimeout: String
    center: String
    dots: String
    dotsEach: String
    dotsSpeed: String
    items: String
    items_brk1: String
    items_brk2: String
    items_brk3: String
    items_brk4: String
    lazyLoad: String
    loop: String
    margin: String
    merge: String
    nav: String
    navSpeed: String
    nav_brk1: String
    nav_brk2: String
    nav_brk3: String
    nav_brk4: String
    rtl: String
    scheduled_ajax: String
    show_title: String
    stagePadding: String
    status: String
    thumbs: String
    title: String
    transition: String
    wrap_link: String
}

"Defines a possible sort field."
type SortField {
    "The label of the sort field."
    label: String
    "The attribute code of the sort field."
    value: String
}

"Contains a default value for sort fields and all available sort fields."
type SortFields {
    "The default sort field value."
    default: String
    "An array of possible sort fields."
    options: [SortField]
}

type SortingOrder {
    "Order code."
    attribute: String!
    "Order id."
    id: String!
    sortDirection: String!
    "Order label."
    text: String!
}

"Contains information about a store's configuration."
type StoreConfig {
    "Contains scripts that must be included in the HTML before the closing `<body>` tag."
    absolute_footer: String
    "Indicates whether guest users can write product reviews. Possible values: 1 (Yes) and 0 (No)."
    allow_guests_to_write_product_reviews: String
    "The value of the Allow Gift Messages for Order Items option"
    allow_items: String
    "The value of the Allow Gift Messages on Order Level option"
    allow_order: String
    "Amasty Brands Menu Item Label."
    amshopby_brand_general_menu_item_label: String
    "Amasty Add Brands Link to Top Menu."
    amshopby_brand_general_topmenu_enabled: Boolean
    "Amasty Brand Listing Logo Height."
    amshopby_brand_listing_brand_logo_height: Int
    "Amasty Brand Listing Logo Width."
    amshopby_brand_listing_brand_logo_width: Int
    "Amasty Product Page Brand Logo Height."
    amshopby_brand_product_page_height: Int
    "Amasty Product Page Brand Logo Width."
    amshopby_brand_product_page_width: Int
    "Leave the Single-Select Filter Visible after Selection."
    amshopby_general_keep_single_choice_visible: Boolean
    "Slider Style."
    amshopby_general_unfolded_options_state: Int
    "Slider Style."
    amshopby_slider_slider_style: String
    "Indicates whether to enable autocomplete on login and forgot password forms."
    autocomplete_on_storefront: Boolean
    "The base currency code."
    base_currency_code: String
    "A fully-qualified URL that is used to create relative links to the `base_url`."
    base_link_url: String
    "The fully-qualified URL that specifies the location of media files."
    base_media_url: String
    "The fully-qualified URL that specifies the location of static view files."
    base_static_url: String
    "The store’s fully-qualified base URL."
    base_url: String
    "The default sort order of the search results list."
    catalog_default_sort_by: String
    "Corresponds to the 'Display Prices In Product Lists' field in the Admin. It indicates how FPT information is displayed on category pages."
    category_fixed_product_tax_display_setting: FixedProductTaxDisplaySettings
    "The suffix applied to category pages, such as `.htm` or `.html`."
    category_url_suffix: String
    "Indicates whether only specific countries can use this payment method."
    check_money_order_enable_for_specific_countries: Boolean
    "Indicates whether the Check/Money Order payment method is enabled."
    check_money_order_enabled: Boolean
    "The name of the party to whom the check must be payable."
    check_money_order_make_check_payable_to: String
    "The maximum order amount required to qualify for the Check/Money Order payment method."
    check_money_order_max_order_total: String
    "The minimum order amount required to qualify for the Check/Money Order payment method."
    check_money_order_min_order_total: String
    "The status of new orders placed using the Check/Money Order payment method."
    check_money_order_new_order_status: String
    "A comma-separated list of specific countries allowed to use the Check/Money Order payment method."
    check_money_order_payment_from_specific_countries: String
    "The full street address or PO Box where the checks are mailed."
    check_money_order_send_check_to: String
    "A number indicating the position of the Check/Money Order payment method in the list of available payment methods during checkout."
    check_money_order_sort_order: Int
    "The title of the Check/Money Order payment method displayed on the storefront."
    check_money_order_title: String
    "The name of the CMS page that identifies the home page for the store."
    cms_home_page: String
    "A specific CMS page that displays when cookies are not enabled for the browser."
    cms_no_cookies: String
    "A specific CMS page that displays when a 404 'Page Not Found' error occurs."
    cms_no_route: String
    "A code assigned to the store to identify it."
    code: String @deprecated(reason: "Use `store_code` instead.")
    "Indicates whether the `parent` or child (`itself`) thumbnail should be used in the cart for configurable products."
    configurable_thumbnail_source: String
    "The copyright statement that appears at the bottom of each page."
    copyright: String
    "The description that provides a summary of your site for search engine listings. It should not be more than 160 characters in length."
    default_description: String
    "The default display currency code."
    default_display_currency_code: String
    "A series of keywords that describe your store, each separated by a comma."
    default_keywords: String
    "The title that appears at the title bar of each page when viewed in a browser."
    default_title: String
    "Controls the display of the demo store notice at the top of the page. Options: 0 (No) or 1 (Yes)."
    demonotice: Int
    "Extended Config Data - firecheckout/general/layout"
    firecheckout_design_layout: String
    "Extended Config Data - firecheckout/design/page_layout"
    firecheckout_design_page_layout: String
    "Extended Config Data - firecheckout/design/place_order_button_position"
    firecheckout_design_place_order_button_position: String
    "Extended Config Data - firecheckout/general/enabled"
    firecheckout_general_enabled: Int
    "The landing page that is associated with the base URL."
    front: String
    "The default number of products per page in Grid View."
    grid_per_page: Int
    "A list of numbers that define how many products can be displayed in Grid View."
    grid_per_page_values: String
    "Scripts that must be included in the HTML before the closing `<head>` tag."
    head_includes: String
    "The small graphic image (favicon) that appears in the address bar and tab of the browser."
    head_shortcut_icon: String
    "The path to the logo that appears in the header."
    header_logo_src: String
    "The ID number assigned to the store."
    id: Int @deprecated(reason: "Use `store_code` instead.")
    "Indicates whether the store view has been designated as the default within the store group."
    is_default_store: Boolean
    "Indicates whether the store group has been designated as the default within the website."
    is_default_store_group: Boolean
    "The format of the search results list."
    list_mode: String
    "The default number of products per page in List View."
    list_per_page: Int
    "A list of numbers that define how many products can be displayed in List View."
    list_per_page_values: String
    "The store locale."
    locale: String
    "The Alt text that is associated with the logo."
    logo_alt: String
    "The height of the logo image, in pixels."
    logo_height: Int
    "The width of the logo image, in pixels."
    logo_width: Int
    "Indicates whether wishlists are enabled (1) or disabled (0)."
    magento_wishlist_general_is_enabled: String
    "The minimum number of characters required for a valid password."
    minimum_password_length: String
    "The default page that displays when a 404 'Page not Found' error occurs."
    no_route: String
    "Payflow Pro vault status."
    payment_payflowpro_cc_vault_active: String
    "Corresponds to the 'Display Prices On Product View Page' field in the Admin. It indicates how FPT information is displayed on product pages."
    product_fixed_product_tax_display_setting: FixedProductTaxDisplaySettings
    "Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No)."
    product_reviews_enabled: String
    "The suffix applied to product pages, such as `.htm` or `.html`."
    product_url_suffix: String
    "The number of different character classes (lowercase, uppercase, digits, special characters) required in a password."
    required_character_classes_number: String
    "The ID of the root category."
    root_category_id: Int @deprecated(reason: "Use `root_category_uid` instead.")
    "The unique ID for a `CategoryInterface` object."
    root_category_uid: ID
    "Corresponds to the 'Display Prices In Sales Modules' field in the Admin. It indicates how FPT information is displayed on cart, checkout, and order pages."
    sales_fixed_product_tax_display_setting: FixedProductTaxDisplaySettings
    "A secure fully-qualified URL that is used to create relative links to the `base_url`."
    secure_base_link_url: String
    "The secure fully-qualified URL that specifies the location of media files."
    secure_base_media_url: String
    "The secure fully-qualified URL that specifies the location of static view files."
    secure_base_static_url: String
    "The store’s fully-qualified secure base URL."
    secure_base_url: String
    "Email to a Friend configuration."
    send_friend: SendFriendConfiguration
    "Indicates whether a breadcrumb trail appears on all CMS pages in the catalog. 0 (No) or 1 (Yes)."
    show_cms_breadcrumbs: Int
    "The unique ID of the store view. In the Admin, this is called the Store View Code. When making a GraphQL call, assign this value to the `Store` header to provide the scope."
    store_code: ID
    "The unique ID assigned to the store group. In the Admin, this is called the Store Name."
    store_group_code: ID
    "The label assigned to the store group."
    store_group_name: String
    "The label assigned to the store view."
    store_name: String
    "The store view sort order."
    store_sort_order: Int
    "The time zone of the store."
    timezone: String
    "A prefix that appears before the title to create a two- or three-part title."
    title_prefix: String
    "The character that separates the category name and subcategory in the browser title bar."
    title_separator: String
    "A suffix that appears after the title to create a two- or three-part title."
    title_suffix: String
    "Indicates whether the store code should be used in the URL."
    use_store_in_url: Boolean
    "The unique ID for the website."
    website_code: ID
    "The ID number assigned to the website store."
    website_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "The label assigned to the website."
    website_name: String
    "The unit of weight."
    weight_unit: String
    "Text that appears in the header of the page and includes the name of the logged in customer."
    welcome: String
    "Indicates whether only specific countries can use this payment method."
    zero_subtotal_enable_for_specific_countries: Boolean
    "Indicates whether the Zero Subtotal payment method is enabled."
    zero_subtotal_enabled: Boolean
    "The status of new orders placed using the Zero Subtotal payment method."
    zero_subtotal_new_order_status: String
    "When the new order status is 'Processing', this can be set to `authorize_capture` to automatically invoice all items that have a zero balance."
    zero_subtotal_payment_action: String
    "A comma-separated list of specific countries allowed to use the Zero Subtotal payment method."
    zero_subtotal_payment_from_specific_countries: String
    "A number indicating the position of the Zero Subtotal payment method in the list of available payment methods during checkout."
    zero_subtotal_sort_order: Int
    "The title of the Zero Subtotal payment method displayed on the storefront."
    zero_subtotal_title: String
}

"Indicates where an attribute can be displayed."
type StorefrontProperties {
    "The relative position of the attribute in the layered navigation block."
    position: Int
    "Indicates whether the attribute is filterable with results, without results, or not at all."
    use_in_layered_navigation: UseInLayeredNavigationOptions
    "Indicates whether the attribute is displayed in product listings."
    use_in_product_listing: Boolean
    "Indicates whether the attribute can be used in layered navigation on search results pages."
    use_in_search_results_layered_navigation: Boolean
    "Indicates whether the attribute is displayed on product pages."
    visible_on_catalog_pages: Boolean
}

"Contains the result of the `subscribeEmailToNewsletter` operation."
type SubscribeEmailToNewsletterOutput {
    "The status of the subscription request."
    status: SubscriptionStatusesEnum
}

"Describes the swatch type and a value."
type SwatchData {
    "The type of swatch filter item: 1 - text; 2 - image."
    type: String
    "The value for the swatch item. It could be text or an image link."
    value: String
}

type SwatchLayerFilterItem implements LayerFilterItemInterface & SwatchLayerFilterItemInterface {
    "The count of items per filter."
    items_count: Int @deprecated(reason: "Use `AggregationOption.count` instead.")
    "The label for a filter."
    label: String @deprecated(reason: "Use `AggregationOption.label` instead.")
    "Data required to render a swatch filter item."
    swatch_data: SwatchData
    "The value of a filter request variable to be used in query."
    value_string: String @deprecated(reason: "Use `AggregationOption.value` instead.")
}

"Contains tax item details."
type TaxItem {
    "The amount of tax applied to the item."
    amount: Money!
    "The rate used to calculate the tax."
    rate: Float!
    "A title that describes the tax."
    title: String!
}

type TextSwatchData implements SwatchDataInterface {
    "The value can be represented as color (HEX code), image link, or text."
    value: String
}

"Defines a price based on the quantity purchased."
type TierPrice {
    "The price discount that this tier represents."
    discount: ProductDiscount
    "The price of the product at this tier."
    final_price: Money
    "The minimum number of items that must be purchased to qualify for this price tier."
    quantity: Float
}

type TrustpilotAttachmentSummary {
    attachment_id: String
    processed_files: String
    product_id: Int
    review_id: String
}

type TrustpilotAttributes {
    quality: String
    value_for_money: String
}

type TrustpilotBusinessReviews {
    company_response: String
    consumer_display_name: String
    content: String
    created_at: String
    review_url: String
    stars: Int
    title: String
}

type TrustpilotBusinessReviewsResponse {
    display_name: String
    number_of_reviews: TrustpilotBusinessReviewsSummary
    reviews: [TrustpilotBusinessReviews]
    stars: String
    trust_score: String
    website_url: String
}

type TrustpilotBusinessReviewsSummary {
    five_stars: Int
    four_stars: Int
    one_star: Int
    three_stars: Int
    total: Int
    two_stars: Int
}

type TrustpilotProductReviews {
    attributes: String
    consumer_display_name: String
    content: String
    created_at: String
    product_id: Int
    review_id: String
    stars: Int
}

type TrustpilotProductReviewsDetail {
    trustpilot_attachment_summary: [TrustpilotAttachmentSummary]
    trustpilot_product_reviews: [TrustpilotProductReviews]
}

type TrustpilotProductReviewsSummary {
    attributes: TrustpilotAttributes
    five_stars: Int
    four_stars: Int
    one_star: Int
    product_id: Int
    stars_average: String
    three_stars: Int
    total: Int
    two_stars: Int
}

"Contains details about the cart after updating items."
type UpdateCartItemsOutput {
    "The cart after updating products."
    cart: Cart!
}

type UpdateCheckoutSessionOutput {
    redirectUrl: String
}

"Contains the customer's wish list and any errors encountered."
type UpdateProductsInWishlistOutput {
    "An array of errors encountered while updating products in a wish list."
    user_errors: [WishListUserInputError]!
    "Contains the wish list with all items that were successfully updated."
    wishlist: Wishlist!
}

"Contains URL rewrite details."
type UrlRewrite {
    "An array of request parameters."
    parameters: [HttpQueryParameter]
    "The request URL."
    url: String
}

"An implementation for virtual product cart items."
type VirtualCartItem implements CartItemInterface {
    "An array containing customizable options the shopper selected."
    customizable_options: [SelectedCustomizableOption]!
    date_picker: String
    delivery_warning: String
    "An array of errors encountered while loading the cart item"
    errors: [CartItemError]
    id: String! @deprecated(reason: "Use `uid` instead.")
    "Contains details about the price of the item, including taxes and discounts."
    prices: CartItemPrices
    "Details about an item in the cart."
    product: ProductInterface!
    "The quantity of this item in the cart."
    quantity: Float!
    "The unique ID for a `CartItemInterface` object."
    uid: ID!
}

"Defines a virtual product, which is a non-tangible product that does not require shipping and is not kept in inventory."
type VirtualProduct implements CustomizableProductInterface & ProductInterface & RoutableInterface {
    "Add to cart url."
    add_to_cart_url: String
    "Add to wishlist information."
    add_to_wishlist: String
    additional_features: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    assembly_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The attribute set assigned to the product."
    attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")
    available_colours: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    available_sizes: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    back_stock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    backstock: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    barcode: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    base_slat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Custom data in bedkingdom website"
    bed_data: BedData
    benifts: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled."
    canonical_url: String
    "The categories assigned to a product."
    categories: [CategoryInterface]
    chair_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    colour: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product's country of origin."
    country_of_manufacture: String
    "Timestamp indicating when the product was created."
    created_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Crosssell Products"
    crosssell_products: [ProductInterface]
    delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Detailed information about the product. The value can include simple HTML tags."
    description: ComplexTextValue
    dimentions: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    dining_chairs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_drawers: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    divan_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    exchange_return_upgrade: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    feet_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    filling_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    fold_mechanism: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    free_delivery: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    furniture_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    ggiftcard_amount_config: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Indicates whether a gift message is available."
    gift_message_available: String
    gtin: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    guarantee: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    headboard_included: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The ID number assigned to the product."
    id: Int @deprecated(reason: "Use the `uid` field instead.")
    "The relative path to the main image on the product page."
    image: ProductImage
    ladder: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    leg_diameter: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    length: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number representing the product's manufacturer."
    manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    matching_headboard: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    material_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_bundle: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_depth: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_tention: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_turn: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    mattress_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of media gallery objects."
    media_gallery: [MediaGalleryInterface]
    "An array of MediaGalleryEntry objects."
    media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: String
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: String
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: String
    mpn: String @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The product name. Customers use this name to identify the product."
    name: String
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    new_from_date: String
    "The end date for new product listings."
    new_to_date: String
    nocupboards: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    number_of_springs: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    numberdrawers: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Product stock only x left count"
    only_x_left_in_stock: Float
    optional_extras: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of options for a customizable product."
    options: [CustomizableOptionInterface]
    "If the product has multiple options, determines where they appear on the product page."
    options_container: String
    "Indicates the price of an item."
    price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")
    "The range of prices for the product"
    price_range: PriceRange!
    "An array of `TierPrice` objects."
    price_tiers: [TierPrice]
    "An array of `ProductLinks` objects."
    product_links: [ProductLinksInterface]
    "Product url."
    product_url: String
    ranges: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The average of all the ratings given to the product."
    rating_summary: Float!
    "Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect."
    redirect_code: Int!
    "An array of products to be displayed in a Related Products block."
    related_products: [ProductInterface]
    "The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original."
    relative_url: String
    "The total count of all the reviews given to the product."
    review_count: Int!
    "The list of products reviews."
    reviews(
        "The page of results to return. The default is 1."
        currentPage: Int = 1,
        "The maximum number of results to return at once. The default is 20."
        pageSize: Int = 20
    ): ProductReviews!
    room_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    seat_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A short description of the product. Its use depends on the theme."
    short_description: ComplexTextValue
    size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: String
    "The relative path to the small image, which is used on catalog pages."
    small_image: ProductImage
    "The beginning date that a product has a special price."
    special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")
    "The discounted price of the product."
    special_price: Float
    "The end date for a product with a special price."
    special_to_date: String
    split: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    spring_type_search: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "Stock status of the product"
    stock_status: ProductStockStatus
    stompa_colours: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The file name of a swatch image."
    swatch_image: String
    table_leg_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_leg_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_material: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    table_top_colour: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    temperature_control_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The relative path to the product's thumbnail image."
    thumbnail: ProductImage
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")
    "An array of ProductTierPrices objects."
    tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")
    top_bunk_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_options: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    tv_size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "One of PRODUCT, CATEGORY, or CMS_PAGE."
    type: UrlRewriteEntityTypeEnum
    "One of simple, virtual, bundle, downloadable, grouped, or configurable."
    type_id: String @deprecated(reason: "Use `__typename` instead.")
    udropship_vendor: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "The unique ID for a `ProductInterface` object."
    uid: ID!
    "Timestamp indicating when the product was updated."
    updated_at: String @deprecated(reason: "The field should not be used on the storefront.")
    "Upsell Products"
    upsell_products: [ProductInterface]
    "The part of the URL that identifies the product"
    url_key: String
    url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")
    "URL rewrites list"
    url_rewrites: [UrlRewrite]
    "The part of the product URL that is appended after the url key"
    url_suffix: String
    wardrobe_doors: Int @deprecated(reason: "Use the `custom_attributes` field instead.")
    "An array of websites in which the product is available."
    websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
}

"Contains a virtual product wish list item."
type VirtualWishlistItem implements WishlistItemInterface {
    "The date and time the item was added to the wish list."
    added_at: String!
    "Custom options selected for the wish list item."
    customizable_options: [SelectedCustomizableOption]!
    "The description of the item."
    description: String
    "The unique ID for a `WishlistItemInterface` object."
    id: ID!
    "Product details of the wish list item."
    product: ProductInterface
    "The quantity of this wish list item."
    quantity: Float!
}

"Deprecated. It should not be used on the storefront. Contains information about a website."
type Website {
    "A code assigned to the website to identify it."
    code: String @deprecated(reason: "The field should not be used on the storefront.")
    "The default group ID of the website."
    default_group_id: String @deprecated(reason: "The field should not be used on the storefront.")
    "The ID number assigned to the website."
    id: Int @deprecated(reason: "The field should not be used on the storefront.")
    "Indicates whether this is the default website."
    is_default: Boolean @deprecated(reason: "The field should not be used on the storefront.")
    "The website name. Websites use this name to identify it easier."
    name: String @deprecated(reason: "The field should not be used on the storefront.")
    "The attribute to use for sorting websites."
    sort_order: Int @deprecated(reason: "The field should not be used on the storefront.")
}

"An error encountered while performing operations with WishList."
type WishListUserInputError {
    "A wish list-specific error code."
    code: WishListUserInputErrorType!
    "A localized error message."
    message: String!
}

"Contains a customer wish list."
type Wishlist {
    "The unique ID for a `Wishlist` object."
    id: ID
    items: [WishlistItem] @deprecated(reason: "Use the `items_v2` field instead.")
    "The number of items in the wish list."
    items_count: Int
    "An array of items in the customer's wish list."
    items_v2(currentPage: Int = 1, pageSize: Int = 20): WishlistItems
    "An encrypted code that Magento uses to link to the wish list."
    sharing_code: String
    "The time of the last modification to the wish list."
    updated_at: String
}

"Contains details about errors encountered when a customer added wish list items to the cart."
type WishlistCartUserInputError {
    "An error code that describes the error encountered."
    code: WishlistCartUserInputErrorType!
    "A localized error message."
    message: String!
    "The unique ID of the `Wishlist` object containing an error."
    wishlistId: ID!
    "The unique ID of the wish list item containing an error."
    wishlistItemId: ID!
}

"Contains details about a wish list item."
type WishlistItem {
    "The time when the customer added the item to the wish list."
    added_at: String
    "The customer's comment about this item."
    description: String
    "The unique ID for a `WishlistItem` object."
    id: Int
    "Details about the wish list item."
    product: ProductInterface
    "The quantity of this wish list item"
    qty: Float
}

"Contains an array of items in a wish list."
type WishlistItems {
    "A list of items in the wish list."
    items: [WishlistItemInterface]!
    "Contains pagination metadata."
    page_info: SearchResultPageInfo
}

"Deprecated: Use the `Wishlist` type instead."
type WishlistOutput {
    "An array of items in the customer's wish list"
    items: [WishlistItem] @deprecated(reason: "Use the `Wishlist.items` field instead.")
    "The number of items in the wish list."
    items_count: Int @deprecated(reason: "Use the `Wishlist.items_count` field instead.")
    "When multiple wish lists are enabled, the name the customer assigns to the wishlist."
    name: String @deprecated(reason: "This field is related to Commerce functionality and is always `null` in Open Source.")
    "An encrypted code that links to the wish list."
    sharing_code: String @deprecated(reason: "Use the `Wishlist.sharing_code` field instead.")
    "The time of the last modification to the wish list."
    updated_at: String @deprecated(reason: "Use the `Wishlist.updated_at` field instead.")
}

type createClearpayCheckoutOutput {
    "The UTC timestamp of when the checkout token will expire, in ISO 8601 format."
    clearpay_expires: String!
    "A URL that can be used to redirect the consumer to the Clearpay screenflow."
    clearpay_redirectCheckoutUrl: String!
    "Clearpay checkout token to be used to complete payment."
    clearpay_token: String!
}

"Date Format"
enum AmBlogDateFormat {
    DIRECT
    PASSED
}

"Blog Vote Type"
enum AmBlogPagVoteType {
    MINUS
    PLUS
    UPDATE
}

"Blog Page Type"
enum AmBlogPageType {
    ALL
    AUTHOR
    CATEGORY
    TAG
}

"This enumeration defines the type of fee that can be applied to gift card"
enum AmGiftCardFeeTypeEnum {
    FIXED
    PERCENT
}

"This enumeration defines the types of gift cards"
enum AmGiftCardTypeEnum {
    COMBINED
    PRINTED
    VIRTUAL
}

"Label Mode"
enum AmLabelMode {
    CATEGORY
    PRODUCT
}

enum BatchMutationStatus {
    FAILURE
    MIXED_RESULTS
    SUCCESS
}

enum CartItemErrorType {
    ITEM_INCREMENTS
    ITEM_QTY
    UNDEFINED
}

enum CartUserInputErrorType {
    INSUFFICIENT_STOCK
    NOT_SALABLE
    PRODUCT_NOT_FOUND
    UNDEFINED
}

"Indicates how agreements are accepted."
enum CheckoutAgreementMode {
    "Conditions are automatically accepted upon checkout."
    AUTO
    "Shoppers must manually accept the conditions to place an order."
    MANUAL
}

enum CheckoutUserInputErrorCodes {
    INSUFFICIENT_STOCK
    NOT_SALABLE
    PRODUCT_NOT_FOUND
    REORDER_NOT_AVAILABLE
    UNDEFINED
}

"The list of country codes."
enum CountryCodeEnum {
    "Andorra"
    AD
    "United Arab Emirates"
    AE
    "Afghanistan"
    AF
    "Antigua & Barbuda"
    AG
    "Anguilla"
    AI
    "Albania"
    AL
    "Armenia"
    AM
    "Netherlands Antilles"
    AN
    "Angola"
    AO
    "Antarctica"
    AQ
    "Argentina"
    AR
    "American Samoa"
    AS
    "Austria"
    AT
    "Australia"
    AU
    "Aruba"
    AW
    "Åland Islands"
    AX
    "Azerbaijan"
    AZ
    "Bosnia & Herzegovina"
    BA
    "Barbados"
    BB
    "Bangladesh"
    BD
    "Belgium"
    BE
    "Burkina Faso"
    BF
    "Bulgaria"
    BG
    "Bahrain"
    BH
    "Burundi"
    BI
    "Benin"
    BJ
    "St. Barthélemy"
    BL
    "Bermuda"
    BM
    "Brunei"
    BN
    "Bolivia"
    BO
    "Brazil"
    BR
    "Bahamas"
    BS
    "Bhutan"
    BT
    "Bouvet Island"
    BV
    "Botswana"
    BW
    "Belarus"
    BY
    "Belize"
    BZ
    "Canada"
    CA
    "Cocos (Keeling) Islands"
    CC
    "Congo-Kinshasa"
    CD
    "Central African Republic"
    CF
    "Congo-Brazzaville"
    CG
    "Switzerland"
    CH
    "Côte d’Ivoire"
    CI
    "Cook Islands"
    CK
    "Chile"
    CL
    "Cameroon"
    CM
    "China"
    CN
    "Colombia"
    CO
    "Costa Rica"
    CR
    "Cuba"
    CU
    "Cape Verde"
    CV
    "Christmas Island"
    CX
    "Cyprus"
    CY
    "Czech Republic"
    CZ
    "Germany"
    DE
    "Djibouti"
    DJ
    "Denmark"
    DK
    "Dominica"
    DM
    "Dominican Republic"
    DO
    "Algeria"
    DZ
    "Ecuador"
    EC
    "Estonia"
    EE
    "Egypt"
    EG
    "Western Sahara"
    EH
    "Eritrea"
    ER
    "Spain"
    ES
    "Ethiopia"
    ET
    "Finland"
    FI
    "Fiji"
    FJ
    "Falkland Islands"
    FK
    "Micronesia"
    FM
    "Faroe Islands"
    FO
    "France"
    FR
    "Gabon"
    GA
    "United Kingdom"
    GB
    "Grenada"
    GD
    "Georgia"
    GE
    "French Guiana"
    GF
    "Guernsey"
    GG
    "Ghana"
    GH
    "Gibraltar"
    GI
    "Greenland"
    GL
    "Gambia"
    GM
    "Guinea"
    GN
    "Guadeloupe"
    GP
    "Equatorial Guinea"
    GQ
    "Greece"
    GR
    "South Georgia & South Sandwich Islands"
    GS
    "Guatemala"
    GT
    "Guam"
    GU
    "Guinea-Bissau"
    GW
    "Guyana"
    GY
    "Hong Kong SAR China"
    HK
    "Heard &amp; McDonald Islands"
    HM
    "Honduras"
    HN
    "Croatia"
    HR
    "Haiti"
    HT
    "Hungary"
    HU
    "Indonesia"
    ID
    "Ireland"
    IE
    "Israel"
    IL
    "Isle of Man"
    IM
    "India"
    IN
    "British Indian Ocean Territory"
    IO
    "Iraq"
    IQ
    "Iran"
    IR
    "Iceland"
    IS
    "Italy"
    IT
    "Jersey"
    JE
    "Jamaica"
    JM
    "Jordan"
    JO
    "Japan"
    JP
    "Kenya"
    KE
    "Kyrgyzstan"
    KG
    "Cambodia"
    KH
    "Kiribati"
    KI
    "Comoros"
    KM
    "St. Kitts & Nevis"
    KN
    "North Korea"
    KP
    "South Korea"
    KR
    "Kuwait"
    KW
    "Cayman Islands"
    KY
    "Kazakhstan"
    KZ
    "Laos"
    LA
    "Lebanon"
    LB
    "St. Lucia"
    LC
    "Liechtenstein"
    LI
    "Sri Lanka"
    LK
    "Liberia"
    LR
    "Lesotho"
    LS
    "Lithuania"
    LT
    "Luxembourg"
    LU
    "Latvia"
    LV
    "Libya"
    LY
    "Morocco"
    MA
    "Monaco"
    MC
    "Moldova"
    MD
    "Montenegro"
    ME
    "St. Martin"
    MF
    "Madagascar"
    MG
    "Marshall Islands"
    MH
    "Macedonia"
    MK
    "Mali"
    ML
    "Myanmar (Burma)"
    MM
    "Mongolia"
    MN
    "Macau SAR China"
    MO
    "Northern Mariana Islands"
    MP
    "Martinique"
    MQ
    "Mauritania"
    MR
    "Montserrat"
    MS
    "Malta"
    MT
    "Mauritius"
    MU
    "Maldives"
    MV
    "Malawi"
    MW
    "Mexico"
    MX
    "Malaysia"
    MY
    "Mozambique"
    MZ
    "Namibia"
    NA
    "New Caledonia"
    NC
    "Niger"
    NE
    "Norfolk Island"
    NF
    "Nigeria"
    NG
    "Nicaragua"
    NI
    "Netherlands"
    NL
    "Norway"
    NO
    "Nepal"
    NP
    "Nauru"
    NR
    "Niue"
    NU
    "New Zealand"
    NZ
    "Oman"
    OM
    "Panama"
    PA
    "Peru"
    PE
    "French Polynesia"
    PF
    "Papua New Guinea"
    PG
    "Philippines"
    PH
    "Pakistan"
    PK
    "Poland"
    PL
    "St. Pierre & Miquelon"
    PM
    "Pitcairn Islands"
    PN
    "Palestinian Territories"
    PS
    "Portugal"
    PT
    "Palau"
    PW
    "Paraguay"
    PY
    "Qatar"
    QA
    "Réunion"
    RE
    "Romania"
    RO
    "Serbia"
    RS
    "Russia"
    RU
    "Rwanda"
    RW
    "Saudi Arabia"
    SA
    "Solomon Islands"
    SB
    "Seychelles"
    SC
    "Sudan"
    SD
    "Sweden"
    SE
    "Singapore"
    SG
    "St. Helena"
    SH
    "Slovenia"
    SI
    "Svalbard & Jan Mayen"
    SJ
    "Slovakia"
    SK
    "Sierra Leone"
    SL
    "San Marino"
    SM
    "Senegal"
    SN
    "Somalia"
    SO
    "Suriname"
    SR
    "São Tomé & Príncipe"
    ST
    "El Salvador"
    SV
    "Syria"
    SY
    "Swaziland"
    SZ
    "Turks & Caicos Islands"
    TC
    "Chad"
    TD
    "French Southern Territories"
    TF
    "Togo"
    TG
    "Thailand"
    TH
    "Tajikistan"
    TJ
    "Tokelau"
    TK
    "Timor-Leste"
    TL
    "Turkmenistan"
    TM
    "Tunisia"
    TN
    "Tonga"
    TO
    "Turkey"
    TR
    "Trinidad & Tobago"
    TT
    "Tuvalu"
    TV
    "Taiwan"
    TW
    "Tanzania"
    TZ
    "Ukraine"
    UA
    "Uganda"
    UG
    "U.S. Outlying Islands"
    UM
    "United States"
    US
    "Uruguay"
    UY
    "Uzbekistan"
    UZ
    "Vatican City"
    VA
    "St. Vincent & Grenadines"
    VC
    "Venezuela"
    VE
    "British Virgin Islands"
    VG
    "U.S. Virgin Islands"
    VI
    "Vietnam"
    VN
    "Vanuatu"
    VU
    "Wallis & Futuna"
    WF
    "Samoa"
    WS
    "Yemen"
    YE
    "Mayotte"
    YT
    "South Africa"
    ZA
    "Zambia"
    ZM
    "Zimbabwe"
    ZW
}

"The list of available currency codes."
enum CurrencyEnum {
    AED
    AFN
    ALL
    AMD
    ANG
    AOA
    ARS
    AUD
    AWG
    AZM
    AZN
    BAM
    BBD
    BDT
    BGN
    BHD
    BIF
    BMD
    BND
    BOB
    BRL
    BSD
    BTN
    BUK
    BWP
    BYN
    BZD
    CAD
    CDF
    CHE
    CHF
    CHW
    CLP
    CNY
    COP
    CRC
    CUP
    CVE
    CZK
    DJF
    DKK
    DOP
    DZD
    EEK
    EGP
    ERN
    ETB
    EUR
    FJD
    FKP
    GBP
    GEK
    GEL
    GHS
    GIP
    GMD
    GNF
    GQE
    GTQ
    GYD
    HKD
    HNL
    HRK
    HTG
    HUF
    IDR
    ILS
    INR
    IQD
    IRR
    ISK
    JMD
    JOD
    JPY
    KES
    KGS
    KHR
    KMF
    KPW
    KRW
    KWD
    KYD
    KZT
    LAK
    LBP
    LKR
    LRD
    LSL
    LSM
    LTL
    LVL
    LYD
    MAD
    MDL
    MGA
    MKD
    MMK
    MNT
    MOP
    MRO
    MUR
    MVR
    MWK
    MXN
    MYR
    MZN
    NAD
    NGN
    NIC
    NOK
    NPR
    NZD
    OMR
    PAB
    PEN
    PGK
    PHP
    PKR
    PLN
    PYG
    QAR
    RHD
    ROL
    RON
    RSD
    RUB
    RWF
    SAR
    SBD
    SCR
    SDG
    SEK
    SGD
    SHP
    SKK
    SLL
    SOS
    SRD
    STD
    SVC
    SYP
    SZL
    THB
    TJS
    TMM
    TND
    TOP
    TRL
    TRY
    TTD
    TWD
    TZS
    UAH
    UGX
    USD
    UYU
    UZS
    VEB
    VEF
    VND
    VUV
    WST
    XCD
    XOF
    XPF
    YER
    YTL
    ZAR
    ZMK
    ZWD
}

"Defines the customizable date type."
enum CustomizableDateTypeEnum {
    DATE
    DATE_TIME
    TIME
}

enum DownloadableFileTypeEnum {
    FILE @deprecated(reason: "`sample_url` serves to get the downloadable sample")
    URL @deprecated(reason: "`sample_url` serves to get the downloadable sample")
}

"Lists display settings for the Fixed Product Tax."
enum FixedProductTaxDisplaySettings {
    "The displayed price does not include the FPT amount. The values of `ProductPrice.fixed_product_taxes` and the price including the FPT are displayed separately. This value corresponds to 'Excluding FPT, Including FPT description and final price.'"
    EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS
    "The displayed price does not include the FPT amount. The values from `ProductPrice.fixed_product_taxes` are not displayed. This value corresponds to 'Excluding FPT'."
    EXCLUDE_FPT_WITHOUT_DETAILS
    "The FPT feature is not enabled. You can omit `ProductPrice.fixed_product_taxes` from your query."
    FPT_DISABLED
    "The displayed price includes the FPT amount without displaying the `ProductPrice.fixed_product_taxes` values. This value corresponds to 'Including FPT only'."
    INCLUDE_FPT_WITHOUT_DETAILS
    "The displayed price includes the FPT amount while displaying the values of `ProductPrice.fixed_product_taxes` separately. This value corresponds to 'Including FPT and FPT description'."
    INCLUDE_FPT_WITH_DETAILS
}

enum PageTypeEnum {
    CATEGORY
    SEARCH
}

"Indicates the mode for payment. Applies to the Payflow Link and Payments Advanced payment methods."
enum PayflowLinkMode {
    LIVE
    TEST
}

"The list of available payment token types."
enum PaymentTokenTypeEnum {
    "phpcs:ignore Magento2.GraphQL.ValidArgumentName"
    account
    "phpcs:ignore Magento2.GraphQL.ValidArgumentName"
    card
}

"`PriceAdjustment.code` is deprecated."
enum PriceAdjustmentCodesEnum {
    TAX @deprecated(reason: "`PriceAdjustmentCodesEnum` is deprecated. Tax is included or excluded in the price. Tax is not shown separately in Catalog.")
    WEEE @deprecated(reason: "WEEE code is deprecated. Use `fixed_product_taxes.label` instead.")
    WEEE_TAX @deprecated(reason: "Use `fixed_product_taxes` instead.  Tax is included or excluded in price. The tax is not shown separtely in Catalog.")
}

"`PriceAdjustmentDescriptionEnum` is deprecated. States whether a price adjustment is included or excluded."
enum PriceAdjustmentDescriptionEnum {
    EXCLUDED
    INCLUDED
}

"Defines the price type."
enum PriceTypeEnum {
    DYNAMIC
    FIXED
    PERCENT
}

"Defines whether a bundle product's price is displayed as the lowest possible value or as a range."
enum PriceViewEnum {
    AS_LOW_AS
    PRICE_RANGE
}

"This enumeration states whether a product stock status is in stock or out of stock"
enum ProductStockStatus {
    IN_STOCK
    OUT_OF_STOCK
}

"Defines whether bundle items must be shipped together."
enum ShipBundleItemsEnum {
    SEPARATELY
    TOGETHER
}

"Indicates whether to return results in ascending or descending order."
enum SortEnum {
    ASC
    DESC
}

"Indicates the status of the request."
enum SubscriptionStatusesEnum {
    NOT_ACTIVE
    SUBSCRIBED
    UNCONFIRMED
    UNSUBSCRIBED
}

"This enumeration defines the entity type."
enum UrlRewriteEntityTypeEnum {
    AMASTY_XLANDING_PAGE
    CATEGORY
    CHIAKI_PAGE
    CMS_PAGE
    PRODUCT
}

"Defines whether the attribute is filterable in layered navigation."
enum UseInLayeredNavigationOptions {
    FILTERABLE_NO_RESULT
    FILTERABLE_WITH_RESULTS
    NO
}

"A list of possible error types."
enum WishListUserInputErrorType {
    PRODUCT_NOT_FOUND
    UNDEFINED
}

"A list of possible error types."
enum WishlistCartUserInputErrorType {
    INSUFFICIENT_STOCK
    NOT_SALABLE
    PRODUCT_NOT_FOUND
    UNDEFINED
}

input AddAmGiftCardProductsToCartInput {
    "The unique ID that identifies the customer's cart"
    cart_id: String!
    cart_items: [AmGiftCardProductCartItemInput]!
}

"Defines the bundle products to add to the cart."
input AddBundleProductsToCartInput {
    "The ID of the cart."
    cart_id: String!
    "An array of bundle products to add."
    cart_items: [BundleProductCartItemInput]!
}

"Defines the configurable products to add to the cart."
input AddConfigurableProductsToCartInput {
    "The ID of the cart."
    cart_id: String!
    "An array of configurable products to add."
    cart_items: [ConfigurableProductCartItemInput]!
}

input AddDownloadableProductsToCartInput {
    "The ID of the cart."
    cart_id: String!
    "An array of downloadable products to add."
    cart_items: [DownloadableProductCartItemInput]!
}

"Contains products to add to an existing compare list."
input AddProductsToCompareListInput {
    "An array of product IDs to add to the compare list."
    products: [ID]!
    "The unique identifier of the compare list to modify."
    uid: ID!
}

"Defines the simple and group products to add to the cart."
input AddSimpleProductsToCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "An array of simple and group items to add."
    cart_items: [SimpleProductCartItemInput]!
}

"Defines the virtual products to add to the cart."
input AddVirtualProductsToCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "An array of virtual products to add."
    cart_items: [VirtualProductCartItemInput]!
}

"Filter category aggregations in layered navigation."
input AggregationsCategoryFilterInput {
    "Indicates whether to include only direct subcategories or all children categories at all levels."
    includeDirectChildrenOnly: Boolean
}

"An input object that specifies the filters used in product aggregations."
input AggregationsFilterInput {
    "Filter category aggregations in layered navigation."
    category: AggregationsCategoryFilterInput
}

input AmBlogLeaveCommentInput {
    email: String
    message: String!
    name: String
    post_id: Int!
    reply_to: Int
}

input AmBlogLeaveVoteInput {
    post_id: Int!
    type: AmBlogPagVoteType!
}

input AmFormSubmitInput {
    form_data: String
}

input AmGiftCardAccountInput {
    "Defines the input required to identify the gift card account"
    am_gift_card_code: String!
}

input AmGiftCardCodeInAccountInput {
    "Gift card code."
    am_giftcard_code: String!
}

input AmGiftCardOptionsInput {
    "Predefined price of gift card"
    am_giftcard_amount: Float
    "Custom price of gift card"
    am_giftcard_amount_custom: Float
    "Custom image of gift card"
    am_giftcard_custom_image: String
    "Delivery date of gift card"
    am_giftcard_date_delivery: String
    "Timezone of gift card delivery date"
    am_giftcard_date_delivery_timezone: String
    "Image of gift card"
    am_giftcard_image: Int
    "Message from person who bought gift card that will come with product"
    am_giftcard_message: String
    "Email of person who will recieve virtual gift card"
    am_giftcard_recipient_email: String
    "Name of person who will recieve gift card"
    am_giftcard_recipient_name: String
    "Name of person who bought the gift card"
    am_giftcard_sender_name: String
    "Card type for combined gift cards. Can be either printed virtual or combined"
    am_giftcard_type: Int
    "Flag to mark if gift card should be delivired to specified date"
    is_date_delivery: Boolean
}

input AmGiftCardPreviewInput {
    "Predefined price of gift card"
    am_giftcard_amount: Float
    "Custom price of gift card"
    am_giftcard_amount_custom: Float
    "Custom Image name with extension received from image upload API endpoint."
    am_giftcard_custom_image: String
    "Image of gift card"
    am_giftcard_image: Int
    "Message from person who bought gift card that will come with product"
    am_giftcard_message: String
    "Name of person who will recieve gift card"
    am_giftcard_recipient_name: String
    "Name of person who bought the gift card"
    am_giftcard_sender_name: String
}

input AmGiftCardProductCartItemInput {
    data: CartItemInput!
    "Defines input with gift card product options"
    gift_card_options: AmGiftCardOptionsInput!
}

input AmShopbyCustomFilterTypeInput {
    "Rating Value"
    eq: Int
}

"Defines the input required to run the applyAmGiftCardToCart mutation"
input ApplyAmGiftCardToCartInput {
    "The gift card code to be applied to the cart"
    am_gift_card_code: String!
    "The unique ID that identifies the customer's cart"
    cart_id: String!
}

"Specifies the coupon code to apply to the cart."
input ApplyCouponToCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "A valid coupon code."
    coupon_code: String!
}

"AreaInput defines the parameters which will be used for filter by specified location."
input AreaInput {
    "The radius for the search in KM."
    radius: Int!
    "The country code where search must be performed. Required parameter together with region, city or postcode."
    search_term: String!
}

"Defines the attribute characteristics to search for the `attribute_code` and `entity_type` to search."
input AttributeInput {
    "The unique identifier for an attribute code. This value should be in lowercase letters without spaces."
    attribute_code: String
    "The type of entity that defines the attribute."
    entity_type: String
}

"Defines the billing address."
input BillingAddressInput {
    "Defines a billing address."
    address: CartAddressInput
    "An ID from the customer's address book that uniquely identifies the address to be used for billing."
    customer_address_id: Int
    "Indicates whether to set the billing address to be the same as the existing shipping address on the cart."
    same_as_shipping: Boolean
    "Indicates whether to set the shipping address to be the same as this billing address."
    use_for_shipping: Boolean
}

"Defines the input for a bundle option."
input BundleOptionInput {
    "The ID of the option."
    id: Int!
    "The number of the selected item to add to the cart."
    quantity: Float!
    "An array with the chosen value of the option."
    value: [String]!
}

"Defines a single bundle product."
input BundleProductCartItemInput {
    "A mandatory array of options for the bundle product, including each chosen option and specified quantity."
    bundle_options: [BundleOptionInput]!
    "The ID and value of the option."
    customizable_options: [CustomizableOptionInput]
    "The quantity and SKU of the bundle product."
    data: CartItemInput!
}

"Defines the billing or shipping address to be applied to the cart."
input CartAddressInput {
    "The city specified for the billing or shipping address."
    city: String!
    "The company specified for the billing or shipping address."
    company: String
    "The country code and label for the billing or shipping address."
    country_code: String!
    "The first name of the customer or guest."
    firstname: String!
    iz_address_district: String
    iz_address_province: String
    iz_address_ward: String
    "The last name of the customer or guest."
    lastname: String!
    "The ZIP or postal code of the billing or shipping address."
    postcode: String
    "A string that defines the state or province of the billing or shipping address."
    region: String
    "An integer that defines the state or province of the billing or shipping address."
    region_id: Int
    "Determines whether to save the address in the customer's address book. The default value is true."
    save_in_address_book: Boolean
    "An array containing the street for the billing or shipping address."
    street: [String]!
    "The telephone number for the billing or shipping address."
    telephone: String
}

"Defines an item to be added to the cart."
input CartItemInput {
    date_picker: String
    "An array of entered options for the base product, such as personalization text."
    entered_options: [EnteredOptionInput]
    "For a child product, the SKU of its parent product."
    parent_sku: String
    "The amount or number of an item to add."
    quantity: Float!
    "The selected options for the base product, such as color or size, using the unique ID for an object such as `CustomizableRadioOption`, `CustomizableDropDownOption`, or `ConfigurableProductOptionsValues`."
    selected_options: [ID]
    "The SKU of the product."
    sku: String!
}

"A single item to be updated."
input CartItemUpdateInput {
    "Deprecated. Use `cart_item_uid` instead."
    cart_item_id: Int
    "The unique ID for a `CartItemInterface` object."
    cart_item_uid: ID
    "An array that defines customizable options for the product."
    customizable_options: [CustomizableOptionInput]
    "Gift message details for the cart item"
    gift_message: GiftMessageInput
    "The new quantity of the item."
    quantity: Float
}

"Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for."
input CategoryFilterInput {
    "Filter by the unique category ID for a `CategoryInterface` object."
    category_uid: FilterEqualTypeInput
    "Deprecated: use 'category_uid' to filter uniquely identifiers of categories."
    ids: FilterEqualTypeInput
    "Filter by the display name of the category."
    name: FilterMatchTypeInput
    "Filter by the unique parent category ID for a `CategoryInterface` object."
    parent_category_uid: FilterEqualTypeInput
    "Filter by the unique parent category ID for a `CategoryInterface` object."
    parent_id: FilterEqualTypeInput
    "Filter by the part of the URL that identifies the category."
    url_key: FilterEqualTypeInput
    "Filter by the URL path for the category."
    url_path: FilterEqualTypeInput
}

input ChiakiInput {
    key: String
    store_id: String
    user_id: String
    value: String
}

input ClearpayInput {
    "Clearpay checkout token returned by the createClearpayCheckout mutation"
    clearpay_token: String!
}

"A set of relative URLs that Clearpay will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html."
input ClearpayRedirectPathInput {
    "The relative URL of the page that Clearpay will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/clearpay/payment/cancel, the relative URL is clearpay/payment/cancel."
    cancel_path: String!
    "The relative URL of the final confirmation page that Clearpay will redirect to upon payment success. If the full URL to this page is https://www.example.com/clearpay/payment/success, the relative URL is clearpay/payment/success."
    confirm_path: String!
}

input ConfigurableProductCartItemInput {
    "The ID and value of the option."
    customizable_options: [CustomizableOptionInput]
    "The quantity and SKU of the configurable product."
    data: CartItemInput!
    "The SKU of the parent configurable product."
    parent_sku: String
    "Deprecated. Use `CartItemInput.sku` instead."
    variant_sku: String
}

input ContactSubmitInput {
    form_data: String
}

"Contains an array of product IDs to use for creating a compare list."
input CreateCompareListInput {
    "An array of product IDs to add to the compare list."
    products: [ID]
}

"Defines a new product review."
input CreateProductReviewInput {
    "The customer's nickname. Defaults to the customer name, if logged in."
    nickname: String!
    "The ratings details by category. For example, Price: 5 stars, Quality: 4 stars, etc."
    ratings: [ProductReviewRatingInput]!
    "The SKU of the reviewed product."
    sku: String!
    "The summary (title) of the review."
    summary: String!
    "The review text."
    text: String!
}

"Required fields for Payflow Pro and Payments Pro credit card payments."
input CreditCardDetailsInput {
    "The credit card expiration month."
    cc_exp_month: Int!
    "The credit card expiration year."
    cc_exp_year: Int!
    "The last 4 digits of the credit card."
    cc_last_4: Int!
    "The credit card type."
    cc_type: String!
}

"Specifies the attribute code and value of a customer attribute."
input CustomerAddressAttributeInput {
    "The name assigned to the attribute."
    attribute_code: String!
    "The value assigned to the attribute."
    value: String!
}

"Contains details about a billing or shipping address."
input CustomerAddressInput {
    "The customer's city or town."
    city: String
    "The customer's company."
    company: String
    "The two-letter code representing the customer's country."
    country_code: CountryCodeEnum
    "Deprecated: use `country_code` instead."
    country_id: CountryCodeEnum
    "Deprecated: Custom attributes should not be put into container."
    custom_attributes: [CustomerAddressAttributeInput]
    "Indicates whether the address is the default billing address."
    default_billing: Boolean
    "Indicates whether the address is the default shipping address."
    default_shipping: Boolean
    "The customer's fax number."
    fax: String
    "The first name of the person associated with the billing/shipping address."
    firstname: String
    "The family name of the person associated with the billing/shipping address."
    lastname: String
    "The middle name of the person associated with the billing/shipping address."
    middlename: String
    "The customer's ZIP or postal code."
    postcode: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "An object containing the region name, region code, and region ID."
    region: CustomerAddressRegionInput
    "An array of strings that define the street number and name."
    street: [String]
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's telephone number."
    telephone: String
    "The customer's Tax/VAT number (for corporate customers)."
    vat_id: String
}

"Defines the customer's state or province."
input CustomerAddressRegionInput {
    "The state or province name."
    region: String
    "The address region code."
    region_code: String
    "The unique ID for a pre-defined region."
    region_id: Int
}

"An input object for creating a customer."
input CustomerCreateInput {
    "Indicates whether the customer has enabled remote shopping assistance."
    allow_remote_shopping_assistance: Boolean
    "The customer's date of birth."
    date_of_birth: String
    "Deprecated: Use `date_of_birth` instead."
    dob: String
    "The customer's email address."
    email: String!
    "The customer's first name."
    firstname: String!
    "The customer's gender (Male - 1, Female - 2)."
    gender: Int
    "Indicates whether the customer is subscribed to the company's newsletter."
    is_subscribed: Boolean
    "The customer's family name."
    lastname: String!
    "The customer's middle name."
    middlename: String
    "The customer's password."
    password: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's Tax/VAT number (for corporate customers)."
    taxvat: String
}

"An input object that assigns or updates customer attributes."
input CustomerInput {
    "The customer's date of birth."
    date_of_birth: String
    "Deprecated: Use `date_of_birth` instead."
    dob: String
    "The customer's email address. Required when creating a customer."
    email: String
    "The customer's first name."
    firstname: String
    "The customer's gender (Male - 1, Female - 2)."
    gender: Int
    "Indicates whether the customer is subscribed to the company's newsletter."
    is_subscribed: Boolean
    "The customer's family name."
    lastname: String
    "The customer's middle name."
    middlename: String
    "The customer's password."
    password: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's Tax/VAT number (for corporate customers)."
    taxvat: String
}

"Identifies the filter to use for filtering orders."
input CustomerOrdersFilterInput {
    "Filters by order number."
    number: FilterStringTypeInput
}

"An input object for updating a customer."
input CustomerUpdateInput {
    "Indicates whether the customer has enabled remote shopping assistance."
    allow_remote_shopping_assistance: Boolean
    "The customer's date of birth."
    date_of_birth: String
    "Deprecated: Use `date_of_birth` instead."
    dob: String
    "The customer's first name."
    firstname: String
    "The customer's gender (Male - 1, Female - 2)."
    gender: Int
    "Indicates whether the customer is subscribed to the company's newsletter."
    is_subscribed: Boolean
    "The customer's family name."
    lastname: String
    "The customer's middle name."
    middlename: String
    "An honorific, such as Dr., Mr., or Mrs."
    prefix: String
    "A value such as Sr., Jr., or III."
    suffix: String
    "The customer's Tax/VAT number (for corporate customers)."
    taxvat: String
}

"Defines a customizable option."
input CustomizableOptionInput {
    "The customizable option ID of the product."
    id: Int
    "The string value of the option."
    value_string: String!
}

"Defines a single downloadable product."
input DownloadableProductCartItemInput {
    "The ID and value of the option."
    customizable_options: [CustomizableOptionInput]
    "The quantity and SKU of the downloadable product."
    data: CartItemInput!
    "An array of objects containing the link_id of the downloadable product link."
    downloadable_product_links: [DownloadableProductLinksInput]
}

"Contains the link ID for the downloadable product."
input DownloadableProductLinksInput {
    "The unique ID of the downloadable product link."
    link_id: Int!
}

"Defines a customer-entered option."
input EnteredOptionInput {
    "The unique ID for a `CustomizableOptionInterface` object, such as a `CustomizableFieldOption`, `CustomizableFileOption`, or `CustomizableAreaOption` object."
    uid: ID!
    "Text the customer entered."
    value: String!
}

"Defines a filter that matches the input exactly."
input FilterEqualTypeInput {
    "Use this attribute to exactly match the specified string. For example, to filter on a specific category ID, specify a value such as `5`."
    eq: String
    "Use this attribute to filter on an array of values. For example, to filter on category IDs 4, 5, and 6, specify a value of `[\"4\", \"5\", \"6\"]`."
    in: [String]
}

"Defines a filter that performs a fuzzy search."
input FilterMatchTypeInput {
    "Use this attribute to exactly match the specified string. For example, to filter on a specific SKU, specify a value such as `24-MB01`."
    match: String
}

"Defines a filter that matches a range of values, such as prices or dates."
input FilterRangeTypeInput {
    "Use this attribute to specify the lowest possible value in the range."
    from: String
    "Use this attribute to specify the highest possible value in the range."
    to: String
}

"Defines a filter for an input string."
input FilterStringTypeInput {
    "Filters items that are exactly the same as the specified string."
    eq: String
    "Filters items that are exactly the same as entries specified in an array of strings."
    in: [String]
    "Defines a filter that performs a fuzzy search using the specified string."
    match: String
}

"Defines the comparison operators that can be used in a filter."
input FilterTypeInput {
    "Equals."
    eq: String
    finset: [String]
    "From. Must be used with the `to` field."
    from: String
    "Greater than."
    gt: String
    "Greater than or equal to."
    gteq: String
    "In. The value can contain a set of comma-separated values."
    in: [String]
    "Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters."
    like: String
    "Less than."
    lt: String
    "Less than or equal to."
    lteq: String
    "More than or equal to."
    moreq: String
    "Not equal to."
    neq: String
    "Not in. The value can contain a set of comma-separated values."
    nin: [String]
    "Not null."
    notnull: String
    "Is null."
    null: String
    "To. Must be used with the `from` field."
    to: String
}

"Identifies which customer requires remote shopping assistance."
input GenerateCustomerTokenAsAdminInput {
    "The email address of the customer requesting remote shopping assistance."
    customer_email: String!
}

"Contains the text of a gift message, its sender, and recipient"
input GiftMessageInput {
    "Sender name"
    from: String!
    "Gift message text"
    message: String!
    "Recipient name"
    to: String!
}

"Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payments Pro Hosted Solution payment method."
input HostedProInput {
    "The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. For example, if the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html."
    cancel_url: String!
    "The relative URL of the final confirmation page that PayPal redirects to upon payment success. For example, if the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html."
    return_url: String!
}

"Contains the required input to request the secure URL for Payments Pro Hosted Solution payment."
input HostedProUrlInput {
    "The unique ID that identifies the shopper's cart."
    cart_id: String!
}

input KlarnaInput {
    "The authorization token must be provided to set any Klarna Payments method"
    authorization_token: String!
}

"Contains required input for Payflow Express Checkout payments."
input PayflowExpressInput {
    "The unique ID of the PayPal user."
    payer_id: String!
    "The token returned by the createPaypalExpressToken mutation."
    token: String!
}

"A set of relative URLs that PayPal uses in response to various actions during the authorization process. Adobe Commerce prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Link and Payments Advanced payment methods."
input PayflowLinkInput {
    "The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html."
    cancel_url: String!
    "The relative URL of the transaction error page that PayPal redirects to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html."
    error_url: String!
    "The relative URL of the order confirmation page that PayPal redirects to when the payment is successful and additional confirmation is not needed. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html."
    return_url: String!
}

"Contains information required to fetch payment token information for the Payflow Link and Payments Advanced payment methods."
input PayflowLinkTokenInput {
    "The unique ID that identifies the customer's cart."
    cart_id: String!
}

"Contains input for the Payflow Pro and Payments Pro payment methods."
input PayflowProInput {
    "Required input for credit card related information."
    cc_details: CreditCardDetailsInput!
    "Indicates whether details about the shopper's credit/debit card should be tokenized for later usage. Required only if Vault is enabled for the PayPal Payflow Pro payment integration."
    is_active_payment_token_enabler: Boolean
}

"Input required to complete payment. Applies to Payflow Pro and Payments Pro payment methods."
input PayflowProResponseInput {
    "The unique ID that identifies the shopper's cart."
    cart_id: String!
    "The payload returned from PayPal."
    paypal_payload: String!
}

"Contains input required to fetch payment token information for the Payflow Pro and Payments Pro payment methods."
input PayflowProTokenInput {
    "The unique ID that identifies the shopper's cart."
    cart_id: String!
    "A set of relative URLs that PayPal uses for callback."
    urls: PayflowProUrlInput!
}

"Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for the Payflow Pro and Payment Pro payment methods."
input PayflowProUrlInput {
    "The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html."
    cancel_url: String!
    "The relative URL of the transaction error page that PayPal redirects to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html."
    error_url: String!
    "The relative URL of the final confirmation page that PayPal redirects to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html."
    return_url: String!
}

"Defines the payment method."
input PaymentMethodInput {
    "Required input for Clearpay payment"
    clearpay: ClearpayInput
    "The internal name for the payment method."
    code: String!
    "Required input for PayPal Hosted pro payments."
    hosted_pro: HostedProInput
    klarna: KlarnaInput
    "Required input for Payflow Express Checkout payments."
    payflow_express: PayflowExpressInput
    "Required input for PayPal Payflow Link and Payments Advanced payments."
    payflow_link: PayflowLinkInput
    "Required input for PayPal Payflow Pro and Payment Pro payments."
    payflowpro: PayflowProInput
    "Required input for PayPal Payflow Pro vault payments."
    payflowpro_cc_vault: VaultTokenInput
    "Required input for Express Checkout and Payments Standard payments."
    paypal_express: PaypalExpressInput
    "The purchase order number. Optional for most payment methods."
    purchase_order_number: String
}

"Contains required input for Express Checkout and Payments Standard payments."
input PaypalExpressInput {
    "The unique ID of the PayPal user."
    payer_id: String!
    "The token returned by the `createPaypalExpressToken` mutation."
    token: String!
}

"Defines the attributes required to receive a payment token for Express Checkout and Payments Standard payment methods."
input PaypalExpressTokenInput {
    "The unique ID that identifies the customer's cart."
    cart_id: String!
    "The payment method code."
    code: String!
    "Indicates whether the buyer selected the quick checkout button. The default value is false."
    express_button: Boolean
    "A set of relative URLs that PayPal uses in response to various actions during the authorization process."
    urls: PaypalExpressUrlsInput!
    "Indicates whether the buyer clicked the PayPal credit button. The default value is false."
    use_paypal_credit: Boolean
}

"Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Express Checkout and Payments Standard payment methods."
input PaypalExpressUrlsInput {
    "The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html."
    cancel_url: String!
    "The relative URL of the page that PayPal redirects to when the payment has been put on hold for additional review. This condition mostly applies to ACH transactions, and is not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success_pending.html, the relative URL is paypal/action/success_pending.html."
    pending_url: String
    "The relative URL of the final confirmation page that PayPal redirects to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html."
    return_url: String!
    "The relative URL of the order confirmation page that PayPal redirects to when the payment is successful and additional confirmation is not needed. Not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success.html, the relative URL is paypal/action/success.html."
    success_url: String
}

"PickupLocationFilterInput defines the list of attributes and filters for the search."
input PickupLocationFilterInput {
    "Filter by city."
    city: FilterTypeInput
    "Filter by country."
    country_id: FilterTypeInput
    "Filter by pickup location name."
    name: FilterTypeInput
    "Filter by pickup location code."
    pickup_location_code: FilterTypeInput
    "Filter by postcode."
    postcode: FilterTypeInput
    "Filter by region."
    region: FilterTypeInput
    "Filter by region id."
    region_id: FilterTypeInput
    "Filter by street."
    street: FilterTypeInput
}

"PickupLocationSortInput specifies attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order."
input PickupLocationSortInput {
    "City where pickup location is placed."
    city: SortEnum
    "Name of the contact person."
    contact_name: SortEnum
    "Id of the country in two letters."
    country_id: SortEnum
    "Description of the pickup location."
    description: SortEnum
    "Distance to the address, requested by distance filter. Applicable only with distance filter. If distance sort order is present, all other sort orders will be ignored."
    distance: SortEnum
    "Contact email of the pickup location."
    email: SortEnum
    "Contact fax of the pickup location."
    fax: SortEnum
    "Geographic latitude where pickup location is placed."
    latitude: SortEnum
    "Geographic longitude where pickup location is placed."
    longitude: SortEnum
    "The pickup location name. Customer use this to identify the pickup location."
    name: SortEnum
    "Contact phone number of the pickup location."
    phone: SortEnum
    "A code assigned to pickup location to identify the source."
    pickup_location_code: SortEnum
    "Postcode where pickup location is placed."
    postcode: SortEnum
    "Name of the region."
    region: SortEnum
    "Id of the region."
    region_id: SortEnum
    "Street where pickup location is placed."
    street: SortEnum
}

"Specifies the quote to be converted to an order."
input PlaceOrderInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
}

"Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for."
input ProductAttributeFilterInput {
    "New Filter"
    am_is_new: AmShopbyCustomFilterTypeInput
    "Sale Filter"
    am_on_sale: AmShopbyCustomFilterTypeInput
    "Deprecated: use `category_uid` to filter product by category ID."
    category_id: FilterEqualTypeInput
    "Filter product by the unique ID for a `CategoryInterface` object."
    category_uid: FilterEqualTypeInput
    "Attribute label: Color"
    color: FilterEqualTypeInput
    "Attribute label: Lead Time"
    delivery: FilterEqualTypeInput
    "Attribute label: Description"
    description: FilterMatchTypeInput
    "Attribute label: Number of Dining Chairs"
    dining_chairs: FilterEqualTypeInput
    "Attribute label: Filling Type"
    filling_type_search: FilterEqualTypeInput
    "Attribute label: FSC Certified"
    fsc_certified: FilterEqualTypeInput
    "Landing Page Id."
    landing_page_id: FilterTypeInput
    "Attribute label: Brands"
    manufacturer: FilterEqualTypeInput
    "Attribute label: Mattress Depth "
    mattress_depth: FilterEqualTypeInput
    "Attribute label: Mattress Firmness"
    mattress_tention: FilterEqualTypeInput
    "Attribute label: Mattress Type"
    mattress_type: FilterEqualTypeInput
    "Attribute label: Product Name"
    name: FilterMatchTypeInput
    "Attribute label: Number Of Springs"
    number_of_springs: FilterEqualTypeInput
    "Attribute label: Price"
    price: FilterRangeTypeInput
    "Attribute label: Range"
    ranges: FilterEqualTypeInput
    "Rating Filter"
    rating_summary: AmShopbyCustomFilterTypeInput
    "Attribute label: Room Type"
    room_type: FilterEqualTypeInput
    "Attribute label: Short Description"
    short_description: FilterMatchTypeInput
    "Attribute label: Size"
    size: FilterEqualTypeInput
    "Attribute label: SKU"
    sku: FilterEqualTypeInput
    "Attribute label: Spring Type "
    spring_type_search: FilterEqualTypeInput
    "Stock Filter"
    stock_status: AmShopbyCustomFilterTypeInput
    "Attribute label: Table Material"
    table_material: FilterEqualTypeInput
    "Attribute label: Tax Class"
    tax_class_id: FilterEqualTypeInput
    "Attribute label: TV Size"
    tv_size: FilterEqualTypeInput
    "The part of the URL that identifies the product"
    url_key: FilterEqualTypeInput
}

"ProductAttributeSortInput specifies the attribute to use for sorting."
input ProductAttributeSortInput {
    "Is product bestsellers."
    bestsellers: SortEnum
    "Attribute label: Brands"
    manufacturer: SortEnum
    "Attribute label: Mattress Type"
    mattress_type: SortEnum
    "The product most_viewed."
    most_viewed: SortEnum
    "Attribute label: Product Name"
    name: SortEnum
    "Is product new."
    new: SortEnum
    "Sort by the position assigned to each product."
    position: SortEnum
    "Sort by the position assigned to each product."
    price: SortEnum
    "The product price_asc."
    price_asc: SortEnum
    "The product price_desc."
    price_desc: SortEnum
    "The product rating_summary."
    rating_summary: SortEnum
    "Sort by the search relevance score (default)."
    relevance: SortEnum
    "Revenue."
    revenue: SortEnum
    "The product reviews_count."
    reviews_count: SortEnum
    "The product saving."
    saving: SortEnum
    "Attribute label: SKU"
    sku: SortEnum
    "Is product wished."
    wished: SortEnum
}

"ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for."
input ProductFilterInput {
    "The category ID the product belongs to."
    category_id: FilterTypeInput
    "The product's country of origin."
    country_of_manufacture: FilterTypeInput
    "The timestamp indicating when the product was created."
    created_at: FilterTypeInput
    "The name of a custom layout."
    custom_layout: FilterTypeInput
    "XML code that is applied as a layout update to the product page."
    custom_layout_update: FilterTypeInput
    "Detailed information about the product. The value can include simple HTML tags."
    description: FilterTypeInput
    "Indicates whether a gift message is available."
    gift_message_available: FilterTypeInput
    "Indicates whether additional attributes have been created for the product."
    has_options: FilterTypeInput
    "The relative path to the main image on the product page."
    image: FilterTypeInput
    "The label assigned to a product image."
    image_label: FilterTypeInput
    "Landing Page Id."
    landing_page_id: FilterTypeInput
    "A number representing the product's manufacturer."
    manufacturer: FilterTypeInput
    "The numeric maximal price of the product. Do not include the currency code."
    max_price: FilterTypeInput
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: FilterTypeInput
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: FilterTypeInput
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: FilterTypeInput
    "The numeric minimal price of the product. Do not include the currency code."
    min_price: FilterTypeInput
    "The product name. Customers use this name to identify the product."
    name: FilterTypeInput
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    news_from_date: FilterTypeInput
    "The end date for new product listings."
    news_to_date: FilterTypeInput
    "If the product has multiple options, determines where they appear on the product page."
    options_container: FilterTypeInput
    "The keyword required to perform a logical OR comparison."
    or: ProductFilterInput
    "The price of an item."
    price: FilterTypeInput
    "Indicates whether the product has required options."
    required_options: FilterTypeInput
    "A short description of the product. Its use depends on the theme."
    short_description: FilterTypeInput
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: FilterTypeInput
    "The relative path to the small image, which is used on catalog pages."
    small_image: FilterTypeInput
    "The label assigned to a product's small image."
    small_image_label: FilterTypeInput
    "The beginning date that a product has a special price."
    special_from_date: FilterTypeInput
    "The discounted price of the product. Do not include the currency code."
    special_price: FilterTypeInput
    "The end date that a product has a special price."
    special_to_date: FilterTypeInput
    "The file name of a swatch image."
    swatch_image: FilterTypeInput
    "The relative path to the product's thumbnail image."
    thumbnail: FilterTypeInput
    "The label assigned to a product's thumbnail image."
    thumbnail_label: FilterTypeInput
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: FilterTypeInput
    "The timestamp indicating when the product was updated."
    updated_at: FilterTypeInput
    "The part of the URL that identifies the product"
    url_key: FilterTypeInput
    url_path: FilterTypeInput
    "The weight of the item, in units defined by the store."
    weight: FilterTypeInput
}

"Product Information used for Pickup Locations search."
input ProductInfoInput {
    "Product SKU."
    sku: String!
}

input ProductQuestionInput {
    category_ids: String
    email: String
    name: String
    notification: Boolean
    product_ids: String
    title: String!
}

"Contains the reviewer's rating for a single aspect of a review."
input ProductReviewRatingInput {
    "An encoded rating ID."
    id: String!
    "An encoded rating value ID."
    value_id: String!
}

"ProductSortInput specifies the attribute to use for sorting."
input ProductSortInput {
    "Is product bestsellers."
    bestsellers: SortEnum
    "The product's country of origin."
    country_of_manufacture: SortEnum
    "The timestamp indicating when the product was created."
    created_at: SortEnum
    "The name of a custom layout."
    custom_layout: SortEnum
    "XML code that is applied as a layout update to the product page."
    custom_layout_update: SortEnum
    "Detailed information about the product. The value can include simple HTML tags."
    description: SortEnum
    "Indicates whether a gift message is available."
    gift_message_available: SortEnum
    "Indicates whether additional attributes have been created for the product."
    has_options: SortEnum
    "The relative path to the main image on the product page."
    image: SortEnum
    "The label assigned to a product image."
    image_label: SortEnum
    "A number representing the product's manufacturer."
    manufacturer: SortEnum
    "A brief overview of the product for search results listings, maximum 255 characters."
    meta_description: SortEnum
    "A comma-separated list of keywords that are visible only to search engines."
    meta_keyword: SortEnum
    "A string that is displayed in the title bar and tab of the browser and in search results lists."
    meta_title: SortEnum
    "The product most_viewed."
    most_viewed: SortEnum
    "The product name. Customers use this name to identify the product."
    name: SortEnum
    "Is product new."
    new: SortEnum
    "The beginning date for new product listings, and determines if the product is featured as a new product."
    news_from_date: SortEnum
    "The end date for new product listings."
    news_to_date: SortEnum
    "If the product has multiple options, determines where they appear on the product page."
    options_container: SortEnum
    "The price of the item."
    price: SortEnum
    "The product price_asc."
    price_asc: SortEnum
    "The product price_desc."
    price_desc: SortEnum
    "The product rating_summary."
    rating_summary: SortEnum
    "Indicates whether the product has required options."
    required_options: SortEnum
    "Revenue."
    revenue: SortEnum
    "The product reviews_count."
    reviews_count: SortEnum
    "The product saving."
    saving: SortEnum
    "A short description of the product. Its use depends on the theme."
    short_description: SortEnum
    "A number or code assigned to a product to identify the product, options, price, and manufacturer."
    sku: SortEnum
    "The relative path to the small image, which is used on catalog pages."
    small_image: SortEnum
    "The label assigned to a product's small image."
    small_image_label: SortEnum
    "The beginning date that a product has a special price."
    special_from_date: SortEnum
    "The discounted price of the product."
    special_price: SortEnum
    "The end date that a product has a special price."
    special_to_date: SortEnum
    "Indicates the criteria to sort swatches."
    swatch_image: SortEnum
    "The relative path to the product's thumbnail image."
    thumbnail: SortEnum
    "The label assigned to a product's thumbnail image."
    thumbnail_label: SortEnum
    "The price when tier pricing is in effect and the items purchased threshold has been reached."
    tier_price: SortEnum
    "The timestamp indicating when the product was updated."
    updated_at: SortEnum
    "The part of the URL that identifies the product"
    url_key: SortEnum
    url_path: SortEnum
    "The weight of the item, in units defined by the store."
    weight: SortEnum
    "Is product wished."
    wished: SortEnum
}

"Defines the input required to run the removeAmGiftCardFromCart mutation"
input RemoveAmGiftCardFromCartInput {
    "The gift card code to be removed to the cart"
    am_gift_card_code: String!
    "The unique ID that identifies the customer's cart"
    cart_id: String!
}

"Specifies the cart from which to remove a coupon."
input RemoveCouponFromCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
}

"Specifies which items to remove from the cart."
input RemoveItemFromCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "Deprecated. Use `cart_item_uid` instead."
    cart_item_id: Int
    "Required field. The unique ID for a `CartItemInterface` object."
    cart_item_uid: ID
}

input RemoveItemsFromCartInput {
    cart_id: String!
    "Required field. The unique ID for a `CartItemInterface` object"
    cart_items: [CartItemUpdateInput]!
}

"Defines which products to remove from a compare list."
input RemoveProductsFromCompareListInput {
    "An array of product IDs to remove from the compare list."
    products: [ID]!
    "The unique identifier of the compare list to modify."
    uid: ID!
}

"Defines the referenced product and the email sender and recipients."
input SendEmailToFriendInput {
    "The ID of the product that the sender is referencing."
    product_id: Int!
    "An array containing information about each recipient."
    recipients: [SendEmailToFriendRecipientInput]!
    "Information about the customer and the content of the message."
    sender: SendEmailToFriendSenderInput!
}

"Contains details about a recipient."
input SendEmailToFriendRecipientInput {
    "The email address of the recipient."
    email: String!
    "The name of the recipient."
    name: String!
}

"Contains details about the sender."
input SendEmailToFriendSenderInput {
    "The email address of the sender."
    email: String!
    "The text of the message to be sent."
    message: String!
    "The name of the sender."
    name: String!
}

"Sets the billing address."
input SetBillingAddressOnCartInput {
    "The billing address."
    billing_address: BillingAddressInput!
    "The unique ID of a `Cart` object."
    cart_id: String!
}

"Defines the guest email and cart."
input SetGuestEmailOnCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "The email address of the guest."
    email: String!
}

"Applies a payment method to the quote."
input SetPaymentMethodAndPlaceOrderInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "The payment method data to apply to the cart."
    payment_method: PaymentMethodInput!
}

"Applies a payment method to the cart."
input SetPaymentMethodOnCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "The payment method data to apply to the cart."
    payment_method: PaymentMethodInput!
}

"Specifies an array of addresses to use for shipping."
input SetShippingAddressesOnCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "An array of shipping addresses."
    shipping_addresses: [ShippingAddressInput]!
}

"Applies one or shipping methods to the cart."
input SetShippingMethodsOnCartInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "An array of shipping methods."
    shipping_methods: [ShippingMethodInput]!
}

"Defines a single shipping address."
input ShippingAddressInput {
    "Defines a shipping address."
    address: CartAddressInput
    "An ID from the customer's address book that uniquely identifies the address to be used for shipping."
    customer_address_id: Int
    "Text provided by the shopper."
    customer_notes: String
    "The code of Pickup Location which will be used for In-Store Pickup."
    pickup_location_code: String
}

"Defines the shipping carrier and method."
input ShippingMethodInput {
    "A string that identifies a commercial carrier or an offline delivery method."
    carrier_code: String!
    "A string that indicates which service a commercial carrier will use to ship items. For offline delivery methods, this value is similar to the label displayed on the checkout page."
    method_code: String!
}

"Defines a single product to add to the cart."
input SimpleProductCartItemInput {
    "An array that defines customizable options for the product."
    customizable_options: [CustomizableOptionInput]
    "An object containing the `sku`, `quantity`, and other relevant information about the product."
    data: CartItemInput!
}

"Modifies the specified items in the cart."
input UpdateCartItemsInput {
    "The unique ID of a `Cart` object."
    cart_id: String!
    "An array of items to be updated."
    cart_items: [CartItemUpdateInput]!
}

"Contains required input for payment methods with Vault support."
input VaultTokenInput {
    "The public hash of the payment token."
    public_hash: String!
}

"Defines a single product to add to the cart."
input VirtualProductCartItemInput {
    "An array that defines customizable options for the product."
    customizable_options: [CustomizableOptionInput]
    "An object containing the `sku`, `quantity`, and other relevant information about the product."
    data: CartItemInput!
}

"Defines the items to add to a wish list."
input WishlistItemInput {
    "An array of options that the customer entered."
    entered_options: [EnteredOptionInput]
    "For complex product types, the SKU of the parent product."
    parent_sku: String
    "The amount or number of items to add."
    quantity: Float!
    "An array of strings corresponding to options the customer selected."
    selected_options: [ID]
    "The SKU of the product to add. For complex product types, specify the child product SKU."
    sku: String!
}

"Defines updates to items in a wish list."
input WishlistItemUpdateInput {
    "Customer-entered comments about the item."
    description: String
    "An array of options that the customer entered."
    entered_options: [EnteredOptionInput]
    "The new amount or number of this item."
    quantity: Float
    "An array of strings corresponding to options the customer selected."
    selected_options: [ID]
    "The unique ID for a `WishlistItemInterface` object."
    wishlist_item_id: ID!
}

input XnotifInput {
    email: String
    product_id: Int
}

input createClearpayCheckoutInput {
    cart_id: String!
    "A set of relative URLs that Clearpay uses in response to various actions during the authorization process"
    redirect_path: ClearpayRedirectPathInput!
}

"Assigns a specific `cart_id` to the empty cart."
input createEmptyCartInput {
    "The ID to assign to the cart."
    cart_id: String
}

input createKlarnaPaymentsSessionInput {
    cart_id: String!
}
